import { c as createElementBlock, b as createStaticVNode, o as openBlock } from "./app-DERZZvM1.js";
import { _ as _export_sfc } from "./plugin-vue_export-helper-1tPrXgE0.js";
const _sfc_main = {};
function _sfc_render(_ctx, _cache) {
  return openBlock(), createElementBlock("div", null, _cache[0] || (_cache[0] = [
    createStaticVNode('<p>事件循环（Event Loop）是一个无限循环的过程，它一直监测 Call Stack 和任务队列的情况。有任务等待执行时，Event Loop 就等着 Call Stack 变空，一旦变空，就将任务放入 Call Stack 中执行。</p><div class="hint-container tip"><p class="hint-container-title">当 JavaScrip 引擎在执行任务时，永远不会进行 Rendering。</p><p>如果任务执行的时间太长，浏览器就不能做其他任务了（比如这是有一些 user events 不能被处理）。于是，过一段时间之后就会发出一个类似 ”Page Unresponsive“ 的警报，建议杀死任务结束整个页面。</p></div><h2 id="_1-宏任务、微任务" tabindex="-1"><a class="header-anchor" href="#_1-宏任务、微任务"><span>1. 宏任务、微任务</span></a></h2><h3 id="_1-1-宏任务" tabindex="-1"><a class="header-anchor" href="#_1-1-宏任务"><span>1.1 宏任务</span></a></h3><p>宏任务包括：</p><ul><li><code>&lt;script src=&quot;...&quot;&gt;&lt;/script&gt;</code></li><li>HTML DOM Events，如 <code>mousemove</code></li><li><code>setTimeout</code>, <code>setTimeInterval</code></li></ul><h3 id="_1-2-微任务" tabindex="-1"><a class="header-anchor" href="#_1-2-微任务"><span>1.2 微任务</span></a></h3><p>ECMA 标准规定了一个内部队列 <code>promiseJobs</code>，通常被成为”微任务队列“（microtask queue）。</p><p>微任务包括：</p><ul><li>promise 以及 <code>.then/catch/finally</code></li><li><code>await</code></li><li><code>queueMicrotask(func)</code>：对 <code>func</code> 进行排队，以在微任务队列中执行。</li></ul><h2 id="_2-代码执行顺序" tabindex="-1"><a class="header-anchor" href="#_2-代码执行顺序"><span>2. 代码执行顺序</span></a></h2><p>每个宏任务之后，引擎会立刻执行微任务队列中的所有任务；然后再执行其它宏任务，或渲染，或进行其它操作。</p><p>推荐<a href="https://www.youtube.com/watch?v=8aGhZQkoFbQ" target="_blank" rel="noopener noreferrer">视频</a>。</p>', 13)
  ]));
}
const eventLoop_html = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render], ["__file", "event-loop.html.vue"]]);
const data = JSON.parse('{"path":"/front-end/js/js-runtime/event-loop.html","title":"3. 事件循环","lang":"zh-CN","frontmatter":{"lang":"zh-CN","title":"3. 事件循环","description":null,"article":false,"date":"2024-01-10T00:00:00.000Z","order":4},"headers":[{"level":2,"title":"1. 宏任务、微任务","slug":"_1-宏任务、微任务","link":"#_1-宏任务、微任务","children":[{"level":3,"title":"1.1 宏任务","slug":"_1-1-宏任务","link":"#_1-1-宏任务","children":[]},{"level":3,"title":"1.2 微任务","slug":"_1-2-微任务","link":"#_1-2-微任务","children":[]}]},{"level":2,"title":"2. 代码执行顺序","slug":"_2-代码执行顺序","link":"#_2-代码执行顺序","children":[]}],"git":{"createdTime":1735022911000,"updatedTime":1735022911000,"contributors":[{"name":"Hertz","username":"Hertz","email":"hanzhuosoul@gmail.com","commits":1,"url":"https://github.com/Hertz"}]},"readingTime":{"minutes":1.05,"words":314},"filePathRelative":"front-end/js/js-runtime/event-loop.md","localizedDate":"2024年1月10日","excerpt":"<p>事件循环（Event Loop）是一个无限循环的过程，它一直监测 Call Stack 和任务队列的情况。有任务等待执行时，Event Loop 就等着 Call Stack 变空，一旦变空，就将任务放入 Call Stack 中执行。</p>\\n<div class=\\"hint-container tip\\">\\n<p class=\\"hint-container-title\\">当 JavaScrip 引擎在执行任务时，永远不会进行 Rendering。</p>\\n<p>如果任务执行的时间太长，浏览器就不能做其他任务了（比如这是有一些 user events 不能被处理）。于是，过一段时间之后就会发出一个类似 ”Page Unresponsive“ 的警报，建议杀死任务结束整个页面。</p>\\n</div>"}');
export {
  eventLoop_html as comp,
  data
};
