import { c as createElementBlock, b as createStaticVNode, o as openBlock } from "./app-DERZZvM1.js";
import { _ as _export_sfc } from "./plugin-vue_export-helper-1tPrXgE0.js";
const _imports_0 = "/images/front-end/react/class-component-lifecycle.webp";
const _imports_1 = "/images/front-end/react/fc-lifecycle.webp";
const _sfc_main = {};
function _sfc_render(_ctx, _cache) {
  return openBlock(), createElementBlock("div", null, _cache[0] || (_cache[0] = [
    createStaticVNode('<h2 id="_1-类组件的生命周期" tabindex="-1"><a class="header-anchor" href="#_1-类组件的生命周期"><span>1 类组件的生命周期</span></a></h2><p>生命周期方法：挂载（Mounting）、更新（Updating）、卸载（Unmounting）。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">CustomComponent</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span></span>\n<span class="line">  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">    <span class="token comment">// ...</span></span>\n<span class="line">  <span class="token punctuation">}</span></span>\n<span class="line"></span>\n<span class="line">  <span class="token function">componentDidMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>\n<span class="line">  <span class="token function">componentWillUnmount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>\n<span class="line"></span>\n<span class="line">  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">    <span class="token keyword">return</span> <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>title<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span class="token punctuation">;</span></span>\n<span class="line">  <span class="token punctuation">}</span></span>\n<span class="line"><span class="token punctuation">}</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="生命周期" tabindex="-1"><a class="header-anchor" href="#生命周期"><span>生命周期</span></a></h3><div align="center"><img src="' + _imports_0 + '" width="70%/"></div><ul><li><p>渲染阶段：异步过程，负责更新虚拟 DOM（FiberNode）树。这个过程可能会被 React 暂停和恢复、甚至并发处理，因此要求<strong>渲染阶段的生命周期方法必须是没有任何副作用（Side Effect）的纯函数（Pure Function）</strong>。</p></li><li><p>提交阶段：同步过程，根据渲染阶段的比对结果修改真实 DOM，这一阶段的生命周期方法可以包含副作用。</p></li></ul><h3 id="生命周期函数" tabindex="-1"><a class="header-anchor" href="#生命周期函数"><span>生命周期函数</span></a></h3><ul><li><p><code>static getDerivedStateFromProps</code>：如果类组件中定义了这个静态方法，React 会调用这个方法，根据返回值来设置 state。这个特性肯呢个造成组件内部的 state 被意外覆盖，应慎用。</p></li><li><p><code>shouldComponentUpdate</code>：如果类组件中定义了这个方法且返回值是 <code>false</code>，则组件在这一次更新阶段不会重新渲染，后续的 render 等方法也不会被执行，直到下一次更新。这是早期版本最常见的性能优化方法之一，也是最常写出 Bug 的 API 之一。为了尽量避免跳过必要更新，应优先使用 React 的 <a href="https://zh-hans.react.dev/reference/react/PureComponent" target="_blank" rel="noopener noreferrer">PureComponent 组件</a>。</p></li><li><p><code>getSnapshotBeforeUpdate</code>：在本次更新真实 DOM 之前，有一次访问原始 DOM 树的机会。</p></li><li><p><code>componentDidUpdate</code>：要注意，需要通过对比新旧 props 或 state 来避免死循环。</p></li><li><p><code>componentWillUnmount</code>：可以在这个方法中清理定时器、取消不受 React 管理的事件订阅等。</p></li></ul><p>另外，显示调用 <code>forceUpdate()</code> 也可以进行更新。</p><p>对于错误处理，如果组件本身定义了 <code>static getDerivedStateFromError</code> 和 <code>componentDidCatch</code> 这两个生命周期方法中的一个，或者两个都定义了，这个组件就成为了错误边界（Error Boundary），这两个方法会被 React 调用来处理错误。</p><p>如果当前组件不是错误边界，React 就会去找父组件；如果父组件也不是，就继续往上，直到根组件；如果没有被任何组件接住，应用就挂了。到 v18.3.1，只有类组件才能作为错误边界，函数组件不可以。</p><h2 id="_2-函数组件的声明周期" tabindex="-1"><a class="header-anchor" href="#_2-函数组件的声明周期"><span>2 函数组件的声明周期</span></a></h2><h3 id="生命周期-1" tabindex="-1"><a class="header-anchor" href="#生命周期-1"><span>生命周期</span></a></h3><div align="center"><img src="' + _imports_1 + '" width="70%/"></div><ul><li>挂载阶段：React 会执行组件函数，执行过程中遇到 <code>useState</code>、<code>useMemo</code> 等 Hooks 会一次挂在到 FiberNode 上。<code>useEffect</code> 也会被挂载，但是它包含的副作用（Fiber 引擎中称为 Effect）会保留到提交阶段。</li></ul><p>React 在渲染阶段根据返回值创建 FiberNode 树，在提交阶段，React 更新真实 DOM 之后会一次执行前面定义的 Effect。</p><p>提交阶段，React 会更新真实 DOM。然后 React 先执行上一轮 Effect 的清除函数，然后再次执行 Effect（包括 <code>useEffect</code> 和 <code>useLayoutEffect</code>）。<code>useLayoutEffect</code> 的副作用是在更新真实 DOM 之后同步执行的（类似于类组件的 <code>componentDidMount</code>、<code>componentDidUpdate</code>）；而 <code>useEffect</code> 的副作用是异步执行的，一般晚于 <code>useLayoutEffect</code>。</p>', 17)
  ]));
}
const lifecycle_html = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render], ["__file", "lifecycle.html.vue"]]);
const data = JSON.parse('{"path":"/front-end/react/lifecycle.html","title":"生命周期","lang":"zh-CN","frontmatter":{"lang":"zh-CN","title":"生命周期","article":false,"date":"2024-10-28T00:00:00.000Z","order":2},"headers":[{"level":2,"title":"1 类组件的生命周期","slug":"_1-类组件的生命周期","link":"#_1-类组件的生命周期","children":[{"level":3,"title":"生命周期","slug":"生命周期","link":"#生命周期","children":[]},{"level":3,"title":"生命周期函数","slug":"生命周期函数","link":"#生命周期函数","children":[]}]},{"level":2,"title":"2 函数组件的声明周期","slug":"_2-函数组件的声明周期","link":"#_2-函数组件的声明周期","children":[{"level":3,"title":"生命周期","slug":"生命周期-1","link":"#生命周期-1","children":[]}]}],"git":{"createdTime":1735022911000,"updatedTime":1735022911000,"contributors":[{"name":"Hertz","username":"Hertz","email":"hanzhuosoul@gmail.com","commits":1,"url":"https://github.com/Hertz"}]},"readingTime":{"minutes":2.67,"words":800},"filePathRelative":"front-end/react/lifecycle.md","localizedDate":"2024年10月28日","excerpt":"<h2>1 类组件的生命周期</h2>\\n<p>生命周期方法：挂载（Mounting）、更新（Updating）、卸载（Unmounting）。</p>\\n<div class=\\"language-javascript line-numbers-mode\\" data-highlighter=\\"prismjs\\" data-ext=\\"js\\" data-title=\\"js\\"><pre><code><span class=\\"line\\"><span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">CustomComponent</span> <span class=\\"token keyword\\">extends</span> <span class=\\"token class-name\\">React<span class=\\"token punctuation\\">.</span>Component</span> <span class=\\"token punctuation\\">{</span></span>\\n<span class=\\"line\\">  <span class=\\"token function\\">constructor</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">props</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span></span>\\n<span class=\\"line\\">    <span class=\\"token keyword\\">super</span><span class=\\"token punctuation\\">(</span>props<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span></span>\\n<span class=\\"line\\">    <span class=\\"token comment\\">// ...</span></span>\\n<span class=\\"line\\">  <span class=\\"token punctuation\\">}</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\">  <span class=\\"token function\\">componentDidMount</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">}</span></span>\\n<span class=\\"line\\">  <span class=\\"token function\\">componentWillUnmount</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">}</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\">  <span class=\\"token function\\">render</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span></span>\\n<span class=\\"line\\">    <span class=\\"token keyword\\">return</span> <span class=\\"token operator\\">&lt;</span>div<span class=\\"token operator\\">&gt;</span><span class=\\"token punctuation\\">{</span><span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>props<span class=\\"token punctuation\\">.</span>title<span class=\\"token punctuation\\">}</span><span class=\\"token operator\\">&lt;</span><span class=\\"token operator\\">/</span>div<span class=\\"token operator\\">&gt;</span><span class=\\"token punctuation\\">;</span></span>\\n<span class=\\"line\\">  <span class=\\"token punctuation\\">}</span></span>\\n<span class=\\"line\\"><span class=\\"token punctuation\\">}</span></span>\\n<span class=\\"line\\"></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>"}');
export {
  lifecycle_html as comp,
  data
};
