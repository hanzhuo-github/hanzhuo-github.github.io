import { r as resolveComponent, c as createElementBlock, f as createBaseVNode, g as createTextVNode, d as createVNode, e as withCtx, b as createStaticVNode, o as openBlock } from "./app-BO1sXcn2.js";
import { _ as _export_sfc } from "./plugin-vue_export-helper-1tPrXgE0.js";
const _sfc_main = {};
const _hoisted_1 = { class: "hint-container details" };
function _sfc_render(_ctx, _cache) {
  const _component_CodeTabs = resolveComponent("CodeTabs");
  return openBlock(), createElementBlock("div", null, [
    _cache[16] || (_cache[16] = createBaseVNode(
      "p",
      null,
      [
        createBaseVNode("a", {
          href: "https://huggingface.co/",
          target: "_blank",
          rel: "noopener noreferrer"
        }, "Hugging Face Hub"),
        createTextVNode(" ÊòØ‰∏ªÁΩëÁ´ôÔºåÊàë‰ª¨ÂèØ‰ª•Âú®ÈáåÈù¢ÊâæÂà∞ÂêÑÁßçÊúÄÊñ∞ÁöÑÊ®°ÂûãÂíåÊï∞ÊçÆÈõÜÔºå‰πüÂèØ‰ª•‰∏ä‰º†Ëá™Â∑±ÁöÑÊ®°ÂûãÂíåÊï∞ÊçÆÈõÜ„ÄÇ")
      ],
      -1
      /* HOISTED */
    )),
    _cache[17] || (_cache[17] = createBaseVNode(
      "p",
      null,
      "ÂÖ∂‰∏≠ÁöÑÊ®°Âûã‰∏çÂ±ÄÈôê‰∫é ü§ó Transformers ÊàñËÄÖ NLP„ÄÇ‰Ω†ÂèØ‰ª•Ëá™Â∑±ÂéªÊé¢Á¥¢„ÄÇ",
      -1
      /* HOISTED */
    )),
    _cache[18] || (_cache[18] = createBaseVNode(
      "p",
      null,
      "Ê®°ÂûãÈÉΩÁî® Git ËøõË°åÊâòÁÆ°ÔºåÂÖÅËÆ∏ÁâàÊú¨ÊéßÂà∂ÂíåÈáçÁé∞„ÄÇÂè¶Â§ñÔºåÂú® Hub ‰∏äÂÖ±‰∫´Ê®°Âûã‰ºöËá™Âä®‰∏∫ËØ•Ê®°ÂûãÈÉ®ÁΩ≤ÊâòÁÆ°ÁöÑÊé®ÁêÜ API„ÄÇ",
      -1
      /* HOISTED */
    )),
    _cache[19] || (_cache[19] = createBaseVNode(
      "h2",
      {
        id: "_1-‰ΩøÁî®È¢ÑËÆ≠ÁªÉÊ®°Âûã",
        tabindex: "-1"
      },
      [
        createBaseVNode("a", {
          class: "header-anchor",
          href: "#_1-‰ΩøÁî®È¢ÑËÆ≠ÁªÉÊ®°Âûã"
        }, [
          createBaseVNode("span", null, "1. ‰ΩøÁî®È¢ÑËÆ≠ÁªÉÊ®°Âûã")
        ])
      ],
      -1
      /* HOISTED */
    )),
    _cache[20] || (_cache[20] = createBaseVNode(
      "p",
      null,
      "Â¶ÇÊàë‰ª¨Ë¶Å‰ΩøÁî® camembert-base checkpoints.",
      -1
      /* HOISTED */
    )),
    createVNode(_component_CodeTabs, {
      id: "15",
      data: [{ "id": "pipeline" }, { "id": "model architecture" }, { "id": "Auto* Class" }],
      "tab-id": "python"
    }, {
      title0: withCtx(({ value, isActive }) => _cache[0] || (_cache[0] = [
        createTextVNode("pipeline")
      ])),
      title1: withCtx(({ value, isActive }) => _cache[1] || (_cache[1] = [
        createTextVNode("model architecture")
      ])),
      title2: withCtx(({ value, isActive }) => _cache[2] || (_cache[2] = [
        createTextVNode("Auto* Class")
      ])),
      tab0: withCtx(({ value, isActive }) => _cache[3] || (_cache[3] = [
        createBaseVNode(
          "div",
          {
            class: "language-python",
            "data-highlighter": "prismjs",
            "data-ext": "py",
            "data-title": "py"
          },
          [
            createBaseVNode("pre", null, [
              createBaseVNode("code", null, [
                createBaseVNode("span", { class: "line" }, [
                  createBaseVNode("span", { class: "token comment" }, "# ‰ΩøÁî® pipeline")
                ]),
                createTextVNode("\n"),
                createBaseVNode("span", { class: "line" }, [
                  createBaseVNode("span", { class: "token keyword" }, "from"),
                  createTextVNode(" transformers "),
                  createBaseVNode("span", { class: "token keyword" }, "import"),
                  createTextVNode(" pipeline")
                ]),
                createTextVNode("\n"),
                createBaseVNode("span", { class: "line" }),
                createTextVNode("\n"),
                createBaseVNode("span", { class: "line" }, [
                  createTextVNode("camembert_fill_mask "),
                  createBaseVNode("span", { class: "token operator" }, "="),
                  createTextVNode(" pipeline"),
                  createBaseVNode("span", { class: "token punctuation" }, "("),
                  createBaseVNode("span", { class: "token string" }, '"fill-mask"'),
                  createBaseVNode("span", { class: "token punctuation" }, ","),
                  createTextVNode(" model"),
                  createBaseVNode("span", { class: "token operator" }, "="),
                  createBaseVNode("span", { class: "token string" }, '"camembert-base"'),
                  createBaseVNode("span", { class: "token punctuation" }, ")")
                ]),
                createTextVNode("\n"),
                createBaseVNode("span", { class: "line" }, [
                  createTextVNode("results "),
                  createBaseVNode("span", { class: "token operator" }, "="),
                  createTextVNode(" camembert_fill_mask"),
                  createBaseVNode("span", { class: "token punctuation" }, "("),
                  createBaseVNode("span", { class: "token string" }, '"Le camembert est <mask> :)"'),
                  createBaseVNode("span", { class: "token punctuation" }, ")")
                ]),
                createTextVNode("\n"),
                createBaseVNode("span", { class: "line" })
              ])
            ])
          ],
          -1
          /* HOISTED */
        )
      ])),
      tab1: withCtx(({ value, isActive }) => _cache[4] || (_cache[4] = [
        createBaseVNode(
          "div",
          {
            class: "language-python",
            "data-highlighter": "prismjs",
            "data-ext": "py",
            "data-title": "py"
          },
          [
            createBaseVNode("pre", null, [
              createBaseVNode("code", null, [
                createBaseVNode("span", { class: "line" }, [
                  createBaseVNode("span", { class: "token comment" }, "# Áõ¥Êé•‰ΩøÁî® model architecture")
                ]),
                createTextVNode("\n"),
                createBaseVNode("span", { class: "line" }, [
                  createBaseVNode("span", { class: "token keyword" }, "from"),
                  createTextVNode(" transformers "),
                  createBaseVNode("span", { class: "token keyword" }, "import"),
                  createTextVNode(" CamembertTokenizer"),
                  createBaseVNode("span", { class: "token punctuation" }, ","),
                  createTextVNode(" CamembertForMaskedLM")
                ]),
                createTextVNode("\n"),
                createBaseVNode("span", { class: "line" }),
                createTextVNode("\n"),
                createBaseVNode("span", { class: "line" }, [
                  createTextVNode("tokenizer "),
                  createBaseVNode("span", { class: "token operator" }, "="),
                  createTextVNode(" CamembertTokenizer"),
                  createBaseVNode("span", { class: "token punctuation" }, "."),
                  createTextVNode("from_pretrained"),
                  createBaseVNode("span", { class: "token punctuation" }, "("),
                  createBaseVNode("span", { class: "token string" }, '"camembert-base"'),
                  createBaseVNode("span", { class: "token punctuation" }, ")")
                ]),
                createTextVNode("\n"),
                createBaseVNode("span", { class: "line" }, [
                  createTextVNode("model "),
                  createBaseVNode("span", { class: "token operator" }, "="),
                  createTextVNode(" CamembertForMaskedLM"),
                  createBaseVNode("span", { class: "token punctuation" }, "."),
                  createTextVNode("from_pretrained"),
                  createBaseVNode("span", { class: "token punctuation" }, "("),
                  createBaseVNode("span", { class: "token string" }, '"camembert-base"'),
                  createBaseVNode("span", { class: "token punctuation" }, ")")
                ]),
                createTextVNode("\n"),
                createBaseVNode("span", { class: "line" })
              ])
            ])
          ],
          -1
          /* HOISTED */
        )
      ])),
      tab2: withCtx(({ value, isActive }) => _cache[5] || (_cache[5] = [
        createBaseVNode(
          "div",
          {
            class: "language-python",
            "data-highlighter": "prismjs",
            "data-ext": "py",
            "data-title": "py"
          },
          [
            createBaseVNode("pre", null, [
              createBaseVNode("code", null, [
                createBaseVNode("span", { class: "line" }, [
                  createBaseVNode("span", { class: "token comment" }, "# Êé®Ëçê‰ΩøÁî® Auto* ClassÔºåÂõ†‰∏∫ËøôÁßçÂÆûÁé∞‰∏é architecture Êó†ÂÖ≥")
                ]),
                createTextVNode("\n"),
                createBaseVNode("span", { class: "line" }, [
                  createBaseVNode("span", { class: "token keyword" }, "from"),
                  createTextVNode(" transformers "),
                  createBaseVNode("span", { class: "token keyword" }, "import"),
                  createTextVNode(" AutoTokenizer"),
                  createBaseVNode("span", { class: "token punctuation" }, ","),
                  createTextVNode(" AutoModelForMaskedLM")
                ]),
                createTextVNode("\n"),
                createBaseVNode("span", { class: "line" }),
                createTextVNode("\n"),
                createBaseVNode("span", { class: "line" }, [
                  createTextVNode("tokenizer "),
                  createBaseVNode("span", { class: "token operator" }, "="),
                  createTextVNode(" AutoTokenizer"),
                  createBaseVNode("span", { class: "token punctuation" }, "."),
                  createTextVNode("from_pretrained"),
                  createBaseVNode("span", { class: "token punctuation" }, "("),
                  createBaseVNode("span", { class: "token string" }, '"camembert-base"'),
                  createBaseVNode("span", { class: "token punctuation" }, ")")
                ]),
                createTextVNode("\n"),
                createBaseVNode("span", { class: "line" }, [
                  createTextVNode("model "),
                  createBaseVNode("span", { class: "token operator" }, "="),
                  createTextVNode(" AutoModelForMaskedLM"),
                  createBaseVNode("span", { class: "token punctuation" }, "."),
                  createTextVNode("from_pretrained"),
                  createBaseVNode("span", { class: "token punctuation" }, "("),
                  createBaseVNode("span", { class: "token string" }, '"camembert-base"'),
                  createBaseVNode("span", { class: "token punctuation" }, ")")
                ]),
                createTextVNode("\n"),
                createBaseVNode("span", { class: "line" })
              ])
            ])
          ],
          -1
          /* HOISTED */
        )
      ])),
      _: 1
      /* STABLE */
    }),
    _cache[21] || (_cache[21] = createStaticVNode('<div class="hint-container tip"><p class="hint-container-title">ÊèêÁ§∫</p><p>‰ΩøÁî®È¢ÑËÆ≠ÁªÉÊ®°ÂûãÊó∂ÔºåÂèØ‰ª•Âú® model card ‰∏≠Êü•ÁúãÂÆÉÊòØÂ¶Ç‰ΩïËÆ≠ÁªÉÁöÑÔºåÂú®Âì™‰∫õÊï∞ÊçÆÈõÜ‰∏äËÆ≠ÁªÉÁöÑÔºåÂ±ÄÈôêÊÄßÂíå bias „ÄÇ</p></div><h2 id="_2-ÂÖ±‰∫´È¢ÑËÆ≠ÁªÉÊ®°Âûã" tabindex="-1"><a class="header-anchor" href="#_2-ÂÖ±‰∫´È¢ÑËÆ≠ÁªÉÊ®°Âûã"><span>2. ÂÖ±‰∫´È¢ÑËÆ≠ÁªÉÊ®°Âûã</span></a></h2><p>ÂàõÂª∫Ê®°Âûã‰ªìÂ∫ìÁöÑ‰∏âÁßçÊñπÊ≥ïÔºö</p><ul><li>‰ΩøÁî® <code>push_to_hub</code> API</li><li>‰ΩøÁî® <code>huggingface_hub</code> python Â∫ì</li><li>Âú® web È°µÈù¢‰∏äÂàõÂª∫</li></ul><p>ÂàõÂª∫Â•Ω‰ªìÂ∫ìÂêéÔºåÂ∞±ÂèØ‰ª•ÈÄöËøá git ÊàñËÄÖ git-lfs ‰∏ä‰º†Êñá‰ª∂‰∫Ü„ÄÇ</p><h3 id="_2-1-ÂàõÂª∫Ê®°Âûã‰ªìÂ∫ì" tabindex="-1"><a class="header-anchor" href="#_2-1-ÂàõÂª∫Ê®°Âûã‰ªìÂ∫ì"><span>2.1 ÂàõÂª∫Ê®°Âûã‰ªìÂ∫ì</span></a></h3><h4 id="_2-1-1-‰ΩøÁî®-push-to-hub-api" tabindex="-1"><a class="header-anchor" href="#_2-1-1-‰ΩøÁî®-push-to-hub-api"><span>2.1.1 ‰ΩøÁî® <code>push_to_hub</code> API</span></a></h4><p>‰Ω†ÈúÄË¶ÅË∫´‰ªΩ‰ª§Áâå‰∏ÄÈÅç huggingface_hub Áü•ÈÅì‰Ω†ÁöÑÊùÉÈôê„ÄÇ</p>', 8)),
    createVNode(_component_CodeTabs, {
      id: "66",
      data: [{ "id": "Notebook" }, { "id": "Terminal" }]
    }, {
      title0: withCtx(({ value, isActive }) => _cache[6] || (_cache[6] = [
        createTextVNode("Notebook")
      ])),
      title1: withCtx(({ value, isActive }) => _cache[7] || (_cache[7] = [
        createTextVNode("Terminal")
      ])),
      tab0: withCtx(({ value, isActive }) => _cache[8] || (_cache[8] = [
        createBaseVNode(
          "div",
          {
            class: "language-python",
            "data-highlighter": "prismjs",
            "data-ext": "py",
            "data-title": "py"
          },
          [
            createBaseVNode("pre", null, [
              createBaseVNode("code", null, [
                createBaseVNode("span", { class: "line" }, [
                  createBaseVNode("span", { class: "token keyword" }, "from"),
                  createTextVNode(" huggingface_hub "),
                  createBaseVNode("span", { class: "token keyword" }, "import"),
                  createTextVNode(" notebook_login")
                ]),
                createTextVNode("\n"),
                createBaseVNode("span", { class: "line" }),
                createTextVNode("\n"),
                createBaseVNode("span", { class: "line" }, [
                  createTextVNode("notebook_login"),
                  createBaseVNode("span", { class: "token punctuation" }, "("),
                  createBaseVNode("span", { class: "token punctuation" }, ")")
                ]),
                createTextVNode("\n"),
                createBaseVNode("span", { class: "line" })
              ])
            ])
          ],
          -1
          /* HOISTED */
        )
      ])),
      tab1: withCtx(({ value, isActive }) => _cache[9] || (_cache[9] = [
        createBaseVNode(
          "div",
          {
            class: "language-python",
            "data-highlighter": "prismjs",
            "data-ext": "py",
            "data-title": "py"
          },
          [
            createBaseVNode("pre", null, [
              createBaseVNode("code", null, [
                createBaseVNode("span", { class: "line" }, [
                  createTextVNode("huggingface"),
                  createBaseVNode("span", { class: "token operator" }, "-"),
                  createTextVNode("cli login")
                ]),
                createTextVNode("\n"),
                createBaseVNode("span", { class: "line" })
              ])
            ])
          ],
          -1
          /* HOISTED */
        )
      ])),
      _: 1
      /* STABLE */
    }),
    _cache[22] || (_cache[22] = createStaticVNode('<p>Â¶ÇÊûú‰Ω†‰ΩøÁî® Trainer API ËÆ≠ÁªÉÊ®°ÂûãÔºåÂ∞ÜÊ®°Âûã‰∏ä‰º†Ëá≥ Hub ÊúÄÁÆÄÂçïÁöÑÊñπÂºèÂ∞±ÊòØÂú®ÂÆö‰πâ TrainerArguments Êó∂ÈÖçÁΩÆ <code>push_to_hub=True</code></p><div class="language-python" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">from</span> transformers <span class="token keyword">import</span> TrainerArguments</span>\n<span class="line"></span>\n<span class="line">training_args <span class="token operator">=</span> TrainerArguments<span class="token punctuation">(</span></span>\n<span class="line">    <span class="token string">&quot;bert-finetuned-mrpc&quot;</span><span class="token punctuation">,</span> save_strategy<span class="token operator">=</span><span class="token string">&quot;epoch&quot;</span><span class="token punctuation">,</span> push_to_hub<span class="token operator">=</span><span class="token boolean">True</span></span>\n<span class="line"><span class="token punctuation">)</span></span>\n<span class="line"></span></code></pre></div><p>ÂΩì‰Ω†Ë∞ÉÁî® <code>trainer.train()</code> Êó∂ÔºåTrainer ‰ºöÂú®ÊØèÊ¨°‰øùÂ≠ò model Êó∂ÔºàÊåâÁÖß‰∏äÈù¢ÁöÑÈÖçÁΩÆÔºåÊòØÊØè‰∏™ epochÔºâÂ∞Ü‰Ω†ÁöÑ model ‰∏ä‰º†Âà∞ Hub ‰∏≠ÂØπÂ∫îÁöÑ‰ªìÂ∫ì‰∏ä„ÄÇ‰ªìÂ∫ìÂêçÁß∞‰∏∫‰Ω†ÈÄâÊã©ÁöÑËæìÂá∫Ë∑ØÂæÑÔºàÂ¶Ç‰∏äÈù¢ÁöÑ bert-finetuned-mrpcÔºâÔºå‰Ω†‰πüÂèØ‰ª•Áî® <code>hub_model_id=&quot;a_different_name&quot;</code> Êù•ËÆæÁΩÆ‰∏çÂêåÁöÑÂêçÁß∞„ÄÇÂ¶ÇÊûúË¶ÅÂ∞Ü model ‰∏ä‰º†Âà∞‰Ω†ÊâÄÂú®ÁöÑÁªÑÁªá‰∏ãÔºå‰Ω†ÂèØ‰ª•‰ΩøÁî® <code>hub_model_id=&quot;my_organization/mu_repo_name&quot;</code>„ÄÇ</p><p>ËÆ≠ÁªÉÁªìÊùüÂêéÔºå‰ΩøÁî® <code>trainer.push_to_hub()</code> ‰∏ä‰º†ÊúÄÂêé‰∏ÄÁâà model„ÄÇÂÆÉ‰ºöÁîüÊàê model card„ÄÇ</p><p>Âú®ËæÉ‰ΩéÂ±ÇÁöÑÂÆûÁé∞‰∏≠ÔºåÊàë‰ª¨ÂèØ‰ª•Áõ¥Êé•ÈÄöËøá models„ÄÅtokenizers„ÄÅconfiguration ÂØπË±°ÁöÑ <code>push_to_hub()</code> ÊñπÊ≥ïÊù•ËÆøÈóÆ Model Hub„ÄÇËøôÁßçÊñπÂºèÊó¢ÂèØ‰ª•ÂàõÂª∫‰ªìÂ∫ìÔºåÂèàËÉΩÂ∞Ü model Âíå tokenizer Êñá‰ª∂Áõ¥Êé•Êé®Âà∞‰ªìÂ∫ì‰∏≠„ÄÇ</p><p>È¶ñÂÖàÂàõÂª∫ model Âíå tokenizer„ÄÇ</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">from</span> transformers <span class="token keyword">import</span> AutoModelForMaskedLM<span class="token punctuation">,</span> AutoTokenizer</span>\n<span class="line"></span>\n<span class="line">checkpoint <span class="token operator">=</span> <span class="token string">&quot;camembert-base&quot;</span></span>\n<span class="line"></span>\n<span class="line">model <span class="token operator">=</span> AutoModelForMaskedLM<span class="token punctuation">.</span>from_pretrained<span class="token punctuation">(</span>checkpoint<span class="token punctuation">)</span></span>\n<span class="line">tokenizer <span class="token operator">=</span> AutoTokenizer<span class="token punctuation">.</span>from_pretrained<span class="token punctuation">(</span>checkpoint<span class="token punctuation">)</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>‰Ω†ÂèØ‰ª•ËÆ≠ÁªÉÊ®°Âûã„ÄÅÂØπÊ®°ÂûãËøõË°åÂæÆË∞É„ÄÅÂêë tokenizer ‰∏≠Â¢ûÂä† tokens„ÄÇÂÅöÂÆå‰Ω†ÊÉ≥ÂÅöÁöÑ‰∫ãÊÉÖÊó∂ÂÄôÔºå‰Ω†ÂèØ‰ª•‰ΩøÁî® <code>push_to_hub()</code> Â∞Ü model Êé®Âà∞‰ªìÂ∫ì‰∏≠</p><div class="language-python" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">model<span class="token punctuation">.</span>push_to_hub<span class="token punctuation">(</span><span class="token string">&quot;dummy-model&quot;</span><span class="token punctuation">)</span></span>\n<span class="line"></span></code></pre></div><p>ËøôÂ∞Ü‰ºöÂàõÂª∫Âêç‰∏∫ dummy-model ÁöÑ‰ªìÂ∫ìÔºåÂÖ∂‰∏≠‰ºöÂ°´‰∏ä‰Ω†ÁöÑ model Êñá‰ª∂„ÄÇ</p><p>ÂêåÊ†∑ÔºåÂØπ tokenizer ‰πüÂèØÂÅöÂêåÊ†∑ÁöÑÊìç‰Ωú„ÄÇÁé∞Âú®‰Ω†ÁöÑ‰ªìÂ∫ì‰∏≠Êúâ‰∫ÜÂÖ®ÈÉ®ÊâÄÈúÄÁöÑÊñá‰ª∂„ÄÇ</p><div class="language-python" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">tokenizer<span class="token punctuation">.</span>push_to_hub<span class="token punctuation">(</span><span class="token string">&quot;dummy-model&quot;</span><span class="token punctuation">)</span></span>\n<span class="line"></span></code></pre></div><p>Â¶ÇÊûú‰Ω†ÊÉ≥Â∞Ü‰ªìÂ∫ìÊîæÂà∞ÁªÑÁªá‰∏ãÔºö</p><div class="language-python" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">tokenizer<span class="token punctuation">.</span>push_to_hub<span class="token punctuation">(</span><span class="token string">&quot;dummy-model&quot;</span><span class="token punctuation">,</span> organization<span class="token operator">=</span><span class="token string">&quot;huggingface&quot;</span><span class="token punctuation">)</span></span>\n<span class="line"></span></code></pre></div><p>Â¶ÇÊûú‰Ω†ÊÉ≥‰ΩøÁî®Êüê‰∏™ÁâπÂÆöÁöÑ Hugging Face tokenÔºö</p><div class="language-python" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">tokenizer<span class="token punctuation">.</span>push_to_hub<span class="token punctuation">(</span><span class="token string">&quot;dummy-model&quot;</span><span class="token punctuation">,</span> organization<span class="token operator">=</span><span class="token string">&quot;huggingface&quot;</span><span class="token punctuation">,</span> use_auth_token<span class="token operator">=</span><span class="token string">&quot;&lt;TOKEN&gt;&quot;</span><span class="token punctuation">)</span></span>\n<span class="line"></span></code></pre></div><h4 id="_2-1-2-‰ΩøÁî®-huggingface-hub-python-Â∫ì" tabindex="-1"><a class="header-anchor" href="#_2-1-2-‰ΩøÁî®-huggingface-hub-python-Â∫ì"><span>2.1.2 ‰ΩøÁî® <code>huggingface_hub</code> python Â∫ì</span></a></h4><p>‰Ω†ÈúÄË¶Å‰ΩøÁî® CLI ÁöÑÁôªÂΩïÂëΩ‰ª§</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">huggingface-cli login</span>\n<span class="line"></span></code></pre></div><p>huggingface_hub Â∫ìÊèê‰æõ‰∫ÜÂæàÂ§öÊñπÊ≥ïÂíåÁ±ª„ÄÇ‰∏ãÈù¢ÊòØÂíå‰ªìÂ∫ìÂàõÂª∫„ÄÅÂà†Èô§Á≠âÊúâÂÖ≥ÁöÑÊñπÊ≥ï</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">from</span> huggingface_hub <span class="token keyword">import</span> <span class="token punctuation">(</span></span>\n<span class="line">    <span class="token comment"># User management</span></span>\n<span class="line">    login<span class="token punctuation">,</span></span>\n<span class="line">    logout<span class="token punctuation">,</span></span>\n<span class="line">    whoami<span class="token punctuation">,</span></span>\n<span class="line"></span>\n<span class="line">    <span class="token comment"># Repository creation and management</span></span>\n<span class="line">    create_repo<span class="token punctuation">,</span></span>\n<span class="line">    delete_repo<span class="token punctuation">,</span></span>\n<span class="line">    update_repo_visibility<span class="token punctuation">,</span></span>\n<span class="line"></span>\n<span class="line">    <span class="token comment"># And some methods to retrieve/change information about the content</span></span>\n<span class="line">    list_models<span class="token punctuation">,</span></span>\n<span class="line">    list_datasets<span class="token punctuation">,</span></span>\n<span class="line">    list_metrics<span class="token punctuation">,</span></span>\n<span class="line">    list_repo_files<span class="token punctuation">,</span></span>\n<span class="line">    upload_file<span class="token punctuation">,</span></span>\n<span class="line">    delete_file<span class="token punctuation">,</span></span>\n<span class="line"><span class="token punctuation">)</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token comment"># ÂàõÂª∫‰ªìÂ∫ì</span></span>\n<span class="line"><span class="token keyword">from</span> huggingface_hub <span class="token keyword">import</span> create_repo</span>\n<span class="line"></span>\n<span class="line">create_repo<span class="token punctuation">(</span><span class="token string">&quot;dummy-model&quot;</span><span class="token punctuation">)</span></span>\n<span class="line"><span class="token comment"># ÂèØ‰ª•ÊåáÂÆö organization</span></span>\n<span class="line"><span class="token comment"># create_repo(&quot;dummy-model&quot;, organization=&quot;huggingface&quot;)</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Èô§‰∫ÜÂèØ‰ª•ÊåáÂÆö organizationÔºåËøòÊúâ‰∏Ä‰∫õÂèÇÊï∞Ôºö</p><ul><li>private: ÊòØÂê¶ÂØπÂÖ∂‰ªñ‰∫∫ÂèØËßÅ</li><li>token: ÊòØÂê¶ÊÉ≥Áî®ÁªôÂÆöÁöÑ token Ë¶ÜÁõñÁºìÂ≠ò‰∏≠ÁöÑ token</li><li>repo_type: ÊòØÈÉΩË¶ÅÂàõÂª∫ dataset Êàñ spaceÔºàËÄåÈùûÂàõÂª∫ modelÔºâ„ÄÇÊé•ÂèóÁöÑÂÄºÂèØ‰ª•ÊòØ ‚Äúdataset‚Äù Êàñ ‚Äúspace‚Äù</li></ul><h4 id="_2-1-3-‰ΩøÁî®-web-È°µÈù¢" tabindex="-1"><a class="header-anchor" href="#_2-1-3-‰ΩøÁî®-web-È°µÈù¢"><span>2.1.3 ‰ΩøÁî® web È°µÈù¢</span></a></h4><p>ËøôÈáå‰∏çÂ±ïÂºÄ‰ªãÁªçÔºåÊåâÁÖßÈ°µÈù¢ÊèêÁ§∫ËøõË°åÂç≥ÂèØ„ÄÇ</p><h3 id="_2-2-‰∏ä‰º†-model-files" tabindex="-1"><a class="header-anchor" href="#_2-2-‰∏ä‰º†-model-files"><span>2.2 ‰∏ä‰º† model files</span></a></h3><p>Hugging Face Hub ÁöÑÊñá‰ª∂ÁÆ°ÁêÜÁ≥ªÁªüÂü∫‰∫é gitÔºàÂØπ‰∫é regular filesÔºâÂíå git-lfsÔºàÂØπ‰∫éÂ§ßÊñá‰ª∂Ôºålarge file storageÔºâ„ÄÇ</p><p>‰∏ãÈù¢Êàë‰ª¨Â∞Ü‰ªãÁªç‰∏âÁßç‰∏ä‰º†Êñá‰ª∂Âà∞ Hub ÁöÑÊñπÊ≥ï„ÄÇ</p><h4 id="_2-3-1-upload-file-ÊñπÊ≥ï" tabindex="-1"><a class="header-anchor" href="#_2-3-1-upload-file-ÊñπÊ≥ï"><span>2.3.1 <code>upload_file</code> ÊñπÊ≥ï</span></a></h4><p>‰ΩøÁî® <code>upload_file()</code> ‰∏çÈúÄË¶Å git Êàñ git-lfsÔºåÂÆÉ‰ΩøÁî® http post ËØ∑Ê±ÇÂ∞ÜÊñá‰ª∂Áõ¥Êé•‰º†Âà∞ ü§ó Hub„ÄÇ‰ΩÜÊòØÂÆÉÊ≤°ÊúâÂäûÊ≥ïÂ§ÑÁêÜ 5GB ‰ª•‰∏äÁöÑÊñá‰ª∂„ÄÇ</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">from</span> huggingface_hub <span class="token keyword">import</span> upload_file</span>\n<span class="line"></span>\n<span class="line">upload_file<span class="token punctuation">(</span></span>\n<span class="line">    <span class="token string">&quot;&lt;path_to_file&gt;/config.json&quot;</span><span class="token punctuation">,</span></span>\n<span class="line">    path_in_repo<span class="token operator">=</span><span class="token string">&quot;config.json&quot;</span><span class="token punctuation">,</span></span>\n<span class="line">    repo_id<span class="token operator">=</span><span class="token string">&quot;&lt;namespace&gt;/dummy-model&quot;</span><span class="token punctuation">,</span></span>\n<span class="line"><span class="token punctuation">)</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>ËøòÊúâ‰∏Ä‰∫õÂÖ∂‰ªñÁöÑÂèÇÊï∞Ôºö</p><ul><li>token</li><li>repo_type</li></ul><h4 id="_2-3-2-repository-Á±ª" tabindex="-1"><a class="header-anchor" href="#_2-3-2-repository-Á±ª"><span>2.3.2 <code>Repository</code> Á±ª</span></a></h4><p><code>Repository</code> Á±ª‰ª•‰∫é git ÁöÑÊñπÂºèÁÆ°ÁêÜÊú¨Âú∞‰ªìÂ∫ì„ÄÇ‰ΩøÁî®ËØ•Á±ªÈúÄË¶ÅÂÆâË£Ö git Âíå git-lfs</p>', 36)),
    createBaseVNode("details", _hoisted_1, [
      _cache[14] || (_cache[14] = createBaseVNode(
        "summary",
        null,
        "ÂÆâË£Ö git-lfs",
        -1
        /* HOISTED */
      )),
      _cache[15] || (_cache[15] = createBaseVNode(
        "p",
        null,
        [
          createTextVNode("ÂèÇËÄÉ "),
          createBaseVNode("a", {
            href: "https://git-lfs.com/",
            target: "_blank",
            rel: "noopener noreferrer"
          }, "Git Large File Storage")
        ],
        -1
        /* HOISTED */
      )),
      createVNode(_component_CodeTabs, {
        id: "189",
        data: [{ "id": "Ubuntu" }, { "id": "Mac" }],
        "tab-id": "shell"
      }, {
        title0: withCtx(({ value, isActive }) => _cache[10] || (_cache[10] = [
          createTextVNode("Ubuntu")
        ])),
        title1: withCtx(({ value, isActive }) => _cache[11] || (_cache[11] = [
          createTextVNode("Mac")
        ])),
        tab0: withCtx(({ value, isActive }) => _cache[12] || (_cache[12] = [
          createBaseVNode(
            "div",
            {
              class: "language-bash",
              "data-highlighter": "prismjs",
              "data-ext": "sh",
              "data-title": "sh"
            },
            [
              createBaseVNode("pre", null, [
                createBaseVNode("code", null, [
                  createBaseVNode("span", { class: "line" }, [
                    createBaseVNode("span", { class: "token function" }, "curl"),
                    createTextVNode(),
                    createBaseVNode("span", { class: "token parameter variable" }, "-s"),
                    createTextVNode(" https://packagecloud.io/install/repositories/github/git-lfs/script.deb.sh "),
                    createBaseVNode("span", { class: "token operator" }, "|"),
                    createTextVNode(),
                    createBaseVNode("span", { class: "token function" }, "sudo"),
                    createTextVNode(),
                    createBaseVNode("span", { class: "token function" }, "bash")
                  ]),
                  createTextVNode("\n"),
                  createBaseVNode("span", { class: "line" }, [
                    createBaseVNode("span", { class: "token function" }, "sudo"),
                    createTextVNode(),
                    createBaseVNode("span", { class: "token function" }, "apt-get"),
                    createTextVNode(),
                    createBaseVNode("span", { class: "token function" }, "install"),
                    createTextVNode(" git-lfs")
                  ]),
                  createTextVNode("\n"),
                  createBaseVNode("span", { class: "line" })
                ])
              ])
            ],
            -1
            /* HOISTED */
          )
        ])),
        tab1: withCtx(({ value, isActive }) => _cache[13] || (_cache[13] = [
          createBaseVNode(
            "div",
            {
              class: "language-bash",
              "data-highlighter": "prismjs",
              "data-ext": "sh",
              "data-title": "sh"
            },
            [
              createBaseVNode("pre", null, [
                createBaseVNode("code", null, [
                  createBaseVNode("span", { class: "line" }, [
                    createTextVNode("brew "),
                    createBaseVNode("span", { class: "token function" }, "install"),
                    createTextVNode(" git-lfs")
                  ]),
                  createTextVNode("\n"),
                  createBaseVNode("span", { class: "line" })
                ])
              ])
            ],
            -1
            /* HOISTED */
          )
        ])),
        _: 1
        /* STABLE */
      })
    ]),
    _cache[23] || (_cache[23] = createStaticVNode('<p>:::</p><p>Êàë‰ª¨‰ΩøÁî®ÂàöÂàöÂª∫Â•ΩÁöÑ‰ªìÂ∫ì„ÄÇÈ¶ñÂÖàÊàë‰ª¨ÂÖãÈöÜËøúÁ´Ø‰ªìÂ∫ìÔºö</p><div class="language-python" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">from</span> huggingface_hub <span class="token keyword">import</span> Repository</span>\n<span class="line"></span>\n<span class="line">repo <span class="token operator">=</span> Repository<span class="token punctuation">(</span><span class="token string">&quot;&lt;path_to_dummy_folder&gt;&quot;</span><span class="token punctuation">,</span> clone_from<span class="token operator">=</span><span class="token string">&quot;&lt;namespace&gt;/dummy-model&quot;</span><span class="token punctuation">)</span></span>\n<span class="line"></span></code></pre></div><p>ËøôÂ∞ÜÂú®Êú¨Âú∞ÂàõÂª∫Êñá‰ª∂Â§π&lt;path_to_dummy_folder&gt;„ÄÇËØ•Êñá‰ª∂Â§π‰∏≠ÂåÖÂê´ .gitattributes Êñá‰ª∂„ÄÇ</p><p>Êàë‰ª¨Ëøò‰ºö‰ΩøÁî®‰∏Ä‰∫õ‰º†ÁªüÁöÑ git ÊñπÊ≥ïÔºåÂèÇËÄÉ<a href="https://github.com/huggingface/huggingface_hub/tree/main/src/huggingface_hub#advanced-programmatic-repository-management" target="_blank" rel="noopener noreferrer">ÊñáÊ°£</a>Ôºö</p><div class="language-python" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">repo<span class="token punctuation">.</span>git_pull<span class="token punctuation">(</span><span class="token punctuation">)</span></span>\n<span class="line">repo<span class="token punctuation">.</span>git_add<span class="token punctuation">(</span><span class="token punctuation">)</span></span>\n<span class="line">repo<span class="token punctuation">.</span>git_commit<span class="token punctuation">(</span><span class="token punctuation">)</span></span>\n<span class="line">repo<span class="token punctuation">.</span>git_push<span class="token punctuation">(</span><span class="token punctuation">)</span></span>\n<span class="line">repo<span class="token punctuation">.</span>git_tag<span class="token punctuation">(</span><span class="token punctuation">)</span></span>\n<span class="line"></span></code></pre></div><p>Áé∞Âú®Êàë‰ª¨ÊúâÊÉ≥Ë¶ÅÊé®Âà∞ Hub ‰∏äÁöÑ model Âíå tokenizerÔºåÂπ∂ÊàêÂäü clone ‰∫Ü‰ªìÂ∫ì„ÄÇ</p><p>È¶ñÂÖàÔºåÁ°Æ‰øùÊàë‰ª¨Êú¨Âú∞ clone ÁöÑÁâàÊú¨ÊòØÊúÄÊñ∞ÁöÑÔºö</p><div class="language-python" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">repo<span class="token punctuation">.</span>git_pull<span class="token punctuation">(</span><span class="token punctuation">)</span></span>\n<span class="line"></span></code></pre></div><p>ÁÑ∂ÂêéÊàë‰ª¨Â∞±ÂèØ‰ª•‰øùÂ≠ò model Âíå tokenizer files ‰∫ÜÔºö</p><div class="language-python" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">model<span class="token punctuation">.</span>save_pretrained<span class="token punctuation">(</span><span class="token string">&quot;&lt;path_to_dummy_folder&gt;&quot;</span><span class="token punctuation">)</span></span>\n<span class="line">tokenizer<span class="token punctuation">.</span>save_pretrained<span class="token punctuation">(</span><span class="token string">&quot;&lt;path_to_dummy_folder&gt;&quot;</span><span class="token punctuation">)</span></span>\n<span class="line"></span></code></pre></div><p>ÁõÆÂâçÔºå&lt;path_to_dummy_folder&gt; ‰∏≠ÂåÖÂê´‰∫ÜÂÖ®ÈÉ®ÁöÑ model Âíå tokenizer files„ÄÇÊé•‰∏ãÊù•ÂèØ‰ª•‰ΩøÁî®‰º†ÁªüÁöÑ git Â∑•‰ΩúÊµÅÂ∞Ü‰ªñ‰ª¨Êé®Âà∞ËøúÁ´Ø hubÔºö</p><div class="language-python" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">repo<span class="token punctuation">.</span>git_add<span class="token punctuation">(</span><span class="token punctuation">)</span></span>\n<span class="line">repo<span class="token punctuation">.</span>git_commit<span class="token punctuation">(</span><span class="token string">&quot;Add model and tokenizer files&quot;</span><span class="token punctuation">)</span></span>\n<span class="line">repo<span class="token punctuation">.</span>git_push<span class="token punctuation">(</span><span class="token punctuation">)</span></span>\n<span class="line"></span></code></pre></div><h4 id="_2-3-3-git-based-ÊñπÊ≥ï" tabindex="-1"><a class="header-anchor" href="#_2-3-3-git-based-ÊñπÊ≥ï"><span>2.3.3 <code>git-based</code> ÊñπÊ≥ï</span></a></h4><p>Áõ¥Êé•‰ΩøÁî® git Âíå git-lfs Êù•‰∏ä‰º†Êñá‰ª∂„ÄÇËØ∑Á°Æ‰øùÂÆâË£Ö‰∫Ü git Âíå git-lfs„ÄÇ</p><p>È¶ñÂÖàÔºåÂàùÂßãÂåñ git-lfs</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">git</span> lfs <span class="token function">install</span></span>\n<span class="line"></span></code></pre></div><p>Êé•‰∏ãÊù•ÔºåÁ¨¨‰∏ÄÊ≠•ÊòØÂÖãÈöÜ model ‰ªìÂ∫ìÔºö</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">git</span> clone https://huggingface.co/<span class="token operator">&lt;</span>namespace<span class="token operator">&gt;</span>/<span class="token operator">&lt;</span>your-model-id<span class="token operator">&gt;</span></span>\n<span class="line"></span></code></pre></div><p>‰æãÂ¶ÇÔºåÊàëÁöÑ username ÊòØ hanzhuoÔºå‰ΩøÁî®ÁöÑ model name ÊòØ dummy-model</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">git</span> clone https://huggingface.co/hanzhuo/dummy-model</span>\n<span class="line"></span></code></pre></div><p>Áé∞Âú®ÊàëÁöÑÂ∑•‰ΩúË∑ØÂæÑ‰∏≠Êúâ‰∏Ä‰∏™ dummy-model Êñá‰ª∂Â§πÔºå</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token builtin class-name">cd</span> dummy-model <span class="token operator">&amp;&amp;</span> <span class="token function">ls</span></span>\n<span class="line"></span></code></pre></div><p>ÂèØ‰ª•‰ΩøÁî® git Êù•Ê∑ªÂä†Â∞èÊñá‰ª∂ÔºåÂØπ‰∫éÂ§ßÊñá‰ª∂ÔºåÈúÄË¶Å‰ΩøÁî® git-lfs„ÄÇ</p><p>ÂõûÈ°æ‰∏Ä‰∏ã‰πãÂâçËé∑Âæó model Âíå tokenizer ÁöÑÊñπÂºèÔºö</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">from</span> transformers <span class="token keyword">import</span> AutoModelForMaskedLM<span class="token punctuation">,</span> AutoTokenizer</span>\n<span class="line"></span>\n<span class="line">checkpoint <span class="token operator">=</span> <span class="token string">&quot;camembert-base&quot;</span></span>\n<span class="line"></span>\n<span class="line">model <span class="token operator">=</span> AutoModelForMaskedLM<span class="token punctuation">.</span>from_pretrained<span class="token punctuation">(</span>checkpoint<span class="token punctuation">)</span></span>\n<span class="line">tokenizer <span class="token operator">=</span> AutoTokenizer<span class="token punctuation">.</span>from_pretrained<span class="token punctuation">(</span>checkpoint<span class="token punctuation">)</span></span>\n<span class="line"></span>\n<span class="line"><span class="token comment"># Do whatever with the model, train it, fine-tune it...</span></span>\n<span class="line"></span>\n<span class="line">model<span class="token punctuation">.</span>save_pretrained<span class="token punctuation">(</span><span class="token string">&quot;&lt;path_to_dummy_folder&gt;&quot;</span><span class="token punctuation">)</span></span>\n<span class="line">tokenizer<span class="token punctuation">.</span>save_pretrained<span class="token punctuation">(</span><span class="token string">&quot;&lt;path_to_dummy_folder&gt;&quot;</span><span class="token punctuation">)</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Êàë‰ª¨Áúã‰∏Ä‰∏ã dummy-model ‰∏ãÁöÑÊñá‰ª∂ÁõÆÂΩïÔºö</p><div class="language-text" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">config.json  pytorch_model.bin  README.md  sentencepiece.bpe.model  special_tokens_map.json tokenizer_config.json  tokenizer.json</span>\n<span class="line"></span></code></pre></div><p>Â¶ÇÊûú‰ΩøÁî® <code>ls -lh</code> ÂëΩ‰ª§ÔºåÂèØ‰ª•ÂèëÁé∞ pytorch_model.bin ÁöÑÂ§ßÂ∞èË∂ÖËøá‰∫Ü 400MB„ÄÇ</p><p>Êé•‰∏ãÊù•‰ΩøÁî®Â∏∏ËßÑÁöÑ git ÂëΩ‰ª§Ôºö</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span></span>\n<span class="line"><span class="token function">git</span> status</span>\n<span class="line"></span></code></pre></div><div class="language-text" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">On branch main</span>\n<span class="line">Your branch is up to date with &#39;origin/main&#39;.</span>\n<span class="line"></span>\n<span class="line">Changes to be committed:</span>\n<span class="line">  (use &quot;git restore --staged &lt;file&gt;...&quot; to unstage)</span>\n<span class="line">  modified:   .gitattributes</span>\n<span class="line">	new file:   config.json</span>\n<span class="line">	new file:   pytorch_model.bin</span>\n<span class="line">	new file:   sentencepiece.bpe.model</span>\n<span class="line">	new file:   special_tokens_map.json</span>\n<span class="line">	new file:   tokenizer.json</span>\n<span class="line">	new file:   tokenizer_config.json</span>\n<span class="line"></span></code></pre></div><p>ÂÜçÁúã‰∏Ä‰∏ã git-lfs Ôºö</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">git</span> lfs status</span>\n<span class="line"></span></code></pre></div><div class="language-text" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">On branch main</span>\n<span class="line">Objects to be pushed to origin/main:</span>\n<span class="line"></span>\n<span class="line"></span>\n<span class="line">Objects to be committed:</span>\n<span class="line"></span>\n<span class="line">	config.json (Git: bc20ff2)</span>\n<span class="line">	pytorch_model.bin (LFS: 35686c2)</span>\n<span class="line">	sentencepiece.bpe.model (LFS: 988bc5a)</span>\n<span class="line">	special_tokens_map.json (Git: cb23931)</span>\n<span class="line">	tokenizer.json (Git: 851ff3e)</span>\n<span class="line">	tokenizer_config.json (Git: f0f7783)</span>\n<span class="line"></span>\n<span class="line">Objects not staged for commit:</span>\n<span class="line"></span>\n<span class="line"></span></code></pre></div><p>ÂèØ‰ª•ËßÇÂØüÂà∞ <em>pytorch_model.bin</em> Âíå <em>sentencepiece.bpe.model</em> ‰ΩøÁî®ÁöÑ LFSÔºåÂÖ∂‰ΩôÁöÑÈÉΩÊòØ Git„ÄÇ</p><p>ÊúÄÂêéÔºåcommit Âπ∂ push</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">&quot;First model version&quot;</span></span>\n<span class="line"><span class="token function">git</span> push</span>\n<span class="line"></span></code></pre></div><h2 id="_3-Âª∫Á´ã-model-card" tabindex="-1"><a class="header-anchor" href="#_3-Âª∫Á´ã-model-card"><span>3. Âª∫Á´ã model card</span></a></h2><p>Âª∫Á´ã model card ÊòØÈÄöËøá <em>README.md</em> Êù•ÂÆåÊàêÁöÑ„ÄÇ‰∏∫‰∫ÜÁêÜËß£ model card ÁöÑÈáçË¶Å‰ΩúÁî®Ôºå‰Ω†ÂèØ‰ª•ÈòÖËØª <a href="https://arxiv.org/abs/1810.03993" target="_blank" rel="noopener noreferrer">Model Cards for Model Reporting</a>„ÄÇ</p><p>model card ÈÄöÂ∏∏ÂºÄÁØá‰∏∫ÁÆÄÁü≠ÁöÑÊ¶ÇËø∞ËØ¥ÊòéÂÖ∂Áî®ÈÄîÔºåÁÑ∂ÂêéÊòØ‰ª•‰∏ãÂá†ÈÉ®ÂàÜÔºö</p><ul><li>Model description ÊèèËø∞</li><li>Intended uses &amp; limitations È¢ÑÊúüÁî®ÈÄîÂíåÈôêÂà∂</li><li>How to use Â¶Ç‰Ωï‰ΩøÁî®</li><li>Limitations and bias Â±ÄÈôêÊÄßÂíåÂÅèËßÅ</li><li>Training data ËÆ≠ÁªÉÊï∞ÊçÆ</li><li>Training procedure ËÆ≠ÁªÉËøáÁ®ã</li><li>Variable &amp; metrics ËØÑ‰º∞ÊåáÊ†á</li><li>Evaluation results ËØÑ‰º∞ÁªìÊûú</li></ul><h3 id="model-card-metadata" tabindex="-1"><a class="header-anchor" href="#model-card-metadata"><span>Model card metadata</span></a></h3><p>Âú® Hugging Face Hub ‰∏≠ÔºåÊúâÁöÑ model Â±û‰∫éÁâπÂÆöÁöÑÁ±ªÂûãÔºå‰Ω†ÂèØ‰ª•ÈÄöËøá tasks, languages, libraries Á≠âÁ≠âÊù•Á≠õÈÄâ„ÄÇ</p><p>ËØ∑Êü•Áúã <a href="https://huggingface.co/camembert-base/blob/main/README.md" target="_blank" rel="noopener noreferrer">camembert-base model card</a>Ôºå‰Ω†ËÉΩÁúãÂà∞Âú® model card header ‰∏≠ÊúâÂ¶Ç‰∏ã‰ø°ÊÅØÔºö</p><div class="language-markdown" data-highlighter="prismjs" data-ext="md" data-title="md"><pre><code><span class="line"><span class="token front-matter-block"><span class="token punctuation">---</span></span>\n<span class="line"><span class="token front-matter yaml language-yaml"><span class="token key atrule">language</span><span class="token punctuation">:</span> fr</span>\n<span class="line"><span class="token key atrule">license</span><span class="token punctuation">:</span> mit</span>\n<span class="line"><span class="token key atrule">datasets</span><span class="token punctuation">:</span></span>\n<span class="line"><span class="token punctuation">-</span> oscar</span></span>\n<span class="line"><span class="token punctuation">---</span></span></span>\n<span class="line"></span></code></pre></div><p>ÂÖ∑‰ΩìÈÖçÁΩÆÂèØÊü•Áúã <a href="https://github.com/huggingface/hub-docs/blame/main/modelcard.md" target="_blank" rel="noopener noreferrer">full model card specification</a>„ÄÇ</p>', 47))
  ]);
}
const Chapter4_html = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render], ["__file", "Chapter4.html.vue"]]);
const data = JSON.parse('{"path":"/ai/huggingface-nlp/section1/Chapter4.html","title":"4. ÂÖ±‰∫´ Models Âíå Tokenizers","lang":"zh-CN","frontmatter":{"lang":"zh-CN","title":"4. ÂÖ±‰∫´ Models Âíå Tokenizers","description":null,"article":false},"headers":[{"level":2,"title":"1. ‰ΩøÁî®È¢ÑËÆ≠ÁªÉÊ®°Âûã","slug":"_1-‰ΩøÁî®È¢ÑËÆ≠ÁªÉÊ®°Âûã","link":"#_1-‰ΩøÁî®È¢ÑËÆ≠ÁªÉÊ®°Âûã","children":[]},{"level":2,"title":"2. ÂÖ±‰∫´È¢ÑËÆ≠ÁªÉÊ®°Âûã","slug":"_2-ÂÖ±‰∫´È¢ÑËÆ≠ÁªÉÊ®°Âûã","link":"#_2-ÂÖ±‰∫´È¢ÑËÆ≠ÁªÉÊ®°Âûã","children":[{"level":3,"title":"2.1 ÂàõÂª∫Ê®°Âûã‰ªìÂ∫ì","slug":"_2-1-ÂàõÂª∫Ê®°Âûã‰ªìÂ∫ì","link":"#_2-1-ÂàõÂª∫Ê®°Âûã‰ªìÂ∫ì","children":[{"level":4,"title":"2.1.1 ‰ΩøÁî® push_to_hub API","slug":"_2-1-1-‰ΩøÁî®-push-to-hub-api","link":"#_2-1-1-‰ΩøÁî®-push-to-hub-api","children":[]},{"level":4,"title":"2.1.2 ‰ΩøÁî® huggingface_hub python Â∫ì","slug":"_2-1-2-‰ΩøÁî®-huggingface-hub-python-Â∫ì","link":"#_2-1-2-‰ΩøÁî®-huggingface-hub-python-Â∫ì","children":[]},{"level":4,"title":"2.1.3 ‰ΩøÁî® web È°µÈù¢","slug":"_2-1-3-‰ΩøÁî®-web-È°µÈù¢","link":"#_2-1-3-‰ΩøÁî®-web-È°µÈù¢","children":[]}]},{"level":3,"title":"2.2 ‰∏ä‰º† model files","slug":"_2-2-‰∏ä‰º†-model-files","link":"#_2-2-‰∏ä‰º†-model-files","children":[{"level":4,"title":"2.3.1 upload_file ÊñπÊ≥ï","slug":"_2-3-1-upload-file-ÊñπÊ≥ï","link":"#_2-3-1-upload-file-ÊñπÊ≥ï","children":[]},{"level":4,"title":"2.3.2 Repository Á±ª","slug":"_2-3-2-repository-Á±ª","link":"#_2-3-2-repository-Á±ª","children":[]},{"level":4,"title":"2.3.3 git-based ÊñπÊ≥ï","slug":"_2-3-3-git-based-ÊñπÊ≥ï","link":"#_2-3-3-git-based-ÊñπÊ≥ï","children":[]}]}]},{"level":2,"title":"3. Âª∫Á´ã model card","slug":"_3-Âª∫Á´ã-model-card","link":"#_3-Âª∫Á´ã-model-card","children":[{"level":3,"title":"Model card metadata","slug":"model-card-metadata","link":"#model-card-metadata","children":[]}]}],"git":{"createdTime":1735022911000,"updatedTime":1735022911000,"contributors":[{"name":"Hertz","username":"Hertz","email":"hanzhuosoul@gmail.com","commits":1,"url":"https://github.com/Hertz"}]},"readingTime":{"minutes":6.28,"words":1884},"filePathRelative":"ai/huggingface-nlp/section1/Chapter4.md","localizedDate":"2024Âπ¥12Êúà24Êó•","excerpt":"<p><a href=\\"https://huggingface.co/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">Hugging Face Hub</a> ÊòØ‰∏ªÁΩëÁ´ôÔºåÊàë‰ª¨ÂèØ‰ª•Âú®ÈáåÈù¢ÊâæÂà∞ÂêÑÁßçÊúÄÊñ∞ÁöÑÊ®°ÂûãÂíåÊï∞ÊçÆÈõÜÔºå‰πüÂèØ‰ª•‰∏ä‰º†Ëá™Â∑±ÁöÑÊ®°ÂûãÂíåÊï∞ÊçÆÈõÜ„ÄÇ</p>\\n<p>ÂÖ∂‰∏≠ÁöÑÊ®°Âûã‰∏çÂ±ÄÈôê‰∫é  ü§ó Transformers ÊàñËÄÖ NLP„ÄÇ‰Ω†ÂèØ‰ª•Ëá™Â∑±ÂéªÊé¢Á¥¢„ÄÇ</p>\\n<p>Ê®°ÂûãÈÉΩÁî® Git ËøõË°åÊâòÁÆ°ÔºåÂÖÅËÆ∏ÁâàÊú¨ÊéßÂà∂ÂíåÈáçÁé∞„ÄÇÂè¶Â§ñÔºåÂú® Hub ‰∏äÂÖ±‰∫´Ê®°Âûã‰ºöËá™Âä®‰∏∫ËØ•Ê®°ÂûãÈÉ®ÁΩ≤ÊâòÁÆ°ÁöÑÊé®ÁêÜ API„ÄÇ</p>\\n<h2>1. ‰ΩøÁî®È¢ÑËÆ≠ÁªÉÊ®°Âûã</h2>\\n<p>Â¶ÇÊàë‰ª¨Ë¶Å‰ΩøÁî® camembert-base checkpoints.</p>"}');
export {
  Chapter4_html as comp,
  data
};
