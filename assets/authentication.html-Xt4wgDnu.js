import { r as resolveComponent, c as createElementBlock, b as createStaticVNode, d as createVNode, e as withCtx, f as createBaseVNode, o as openBlock, g as createTextVNode } from "./app-DERZZvM1.js";
import { _ as _export_sfc } from "./plugin-vue_export-helper-1tPrXgE0.js";
const _sfc_main = {};
function _sfc_render(_ctx, _cache) {
  const _component_CodeTabs = resolveComponent("CodeTabs");
  return openBlock(), createElementBlock("div", null, [
    _cache[8] || (_cache[8] = createStaticVNode('<ul><li><p>认证（Authentication, 简写 authn）：验证某个用户是否具有访问<strong>系统</strong>的权限。</p></li><li><p>授权（Authorization, 简写 authz）：验证某个用户是否具有访问<strong>某个资源</strong>的权限。</p></li></ul><p>四种常见的认证方式是：Basic, Digest, OAuth, Bearer</p><h2 id="_1-basic" tabindex="-1"><a class="header-anchor" href="#_1-basic"><span>1 Basic</span></a></h2><p>将 <code>用户名:密码</code> 进行 base64 编码后，放到 HTTP Authorization Header 中。</p><p>优点：实现简单，适用于低安全性需求的场景。</p><p>缺点：Base64 编码不是加密，容易被拦截。为确保安全，通常需要在 HTTPS 连接下使用。</p><h2 id="_2-digest" tabindex="-1"><a class="header-anchor" href="#_2-digest"><span>2 Digest</span></a></h2><p>为了提高安全性，Digest 认证使用哈希算法对用户名、密码等信息进行加密。客户端发送的是加密后的数据，服务器也会对这些数据进行验证。</p><p>优点：相比 Basic 认证更安全，密码不会直接暴露；利用 nonce 和 cnonce 机制，有效止重放攻击。</p><p>缺点：比 Basic Authentication 复杂，服务器和客户端需要协作进行哈希计算；虽然比 Basic 认证更安全，但仍然依赖 MD5 等哈希算法，可能受到哈希碰撞攻击的影响。摘要认证并不能保护内容，所以仍然要与 HTTPS 配合使用，来确保通信的安全。</p><details class="hint-container details"><summary>Digest 认证过程</summary><ol><li>客户端请求资源</li></ol><div class="language-text" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">GET /protected/resource HTTP/1.1</span>\n<span class="line">Host: www.example.com</span>\n<span class="line"></span></code></pre></div><ol start="2"><li>服务器返回质询（Challenge）</li></ol><p>服务器端检测到客户端没有提供认证信息，于是返回 401 Unauthorized 响应。同时在响应头中发送一个质询，要求客户端提供摘要认证信息</p><div class="language-text" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">HTTP/1.1 401 Unauthorized</span>\n<span class="line">WWW-Authenticate: Digest realm=&quot;example.com&quot;, qop=&quot;auth&quot;, nonce=&quot;dcd98b7102dd2f0e8b11d0f600bfb0c093&quot;, opaque=&quot;5ccc069c403ebaf9f0171e9517f40e41&quot;</span>\n<span class="line"></span></code></pre></div><ul><li>realm：服务器定义的保护区域，用来表示资源所属的领域。客户端根据 realm 确定向哪个服务器发送凭证。</li><li>qop：质量保护参数，常见值为 auth（仅用于认证）或 auth-int（用于认证和消息完整性保护）。</li><li>nonce：服务器生成的唯一值，保证每次认证请求的唯一性，用来防止重放攻击。</li><li>opaque：服务器生成的值，客户端必须在后续请求中原样返回，通常用于维护会话。</li></ul><ol start="3"><li>客户端发送摘要响应</li></ol><p>客户端根据服务器的质询计算摘要，并将结果通过 Authorization 头部发送给服务器。</p><div class="language-text" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">Authorization: Digest username=&quot;user&quot;, realm=&quot;example.com&quot;, nonce=&quot;dcd98b7102dd2f0e8b11d0f600bfb0c093&quot;, uri=&quot;/protected/resource&quot;, qop=auth, nc=00000001, cnonce=&quot;0a4f113b&quot;, response=&quot;6629fae49393a05397450978507c4ef1&quot;, opaque=&quot;5ccc069c403ebaf9f0171e9517f40e41&quot;</span>\n<span class="line"></span></code></pre></div><p>摘要的计算基于以下几个部分：</p><div class="language-text" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">HA1 = MD5(username:realm:password)</span>\n<span class="line">HA2 = MD5(method:digestURI)</span>\n<span class="line">response = MD5(HA1:nonce:nc:cnonce:qop:HA2)</span>\n<span class="line"></span></code></pre></div><ul><li>nonce：服务器生成的唯一值</li><li>nc：请求的计数器，客户端维护的计数，每次请求递增</li><li>cnonce：客户端生成的唯一值，防止同一 nonce 被重复使用</li><li>qop：服务器指定的质量保护选项</li></ul><ol start="4"><li>服务器验证摘要</li></ol><p>服务器收到客户端响应后，使用相同的方法计算摘要值，将客户端发送的 response 与自己计算的 response 进行比较。如果一致，则认证成功，服务器返回请求的资源；如果不匹配，则服务器拒绝请求，返回 401，客户端需要重新认证。</p><div class="language-text" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">HTTP/1.1 200 OK</span>\n<span class="line"></span></code></pre></div></details><h2 id="_3-oauth" tabindex="-1"><a class="header-anchor" href="#_3-oauth"><span>3 OAuth</span></a></h2><p>OAuth（开放授权）是一种授权协议，允许第三方应用在用户授权、不暴露用户密码的情况下，安全访问受保护的资源。核心理念是授权与认证分离。OAuth 通常分为两种：OAuth 1.0 和 OAuth 2.0，后者是目前主流版本。</p><p>如通过微信登录微信小程序。第三方指的是<strong>请求访问用户资源的应用程序</strong>，即这里的小程序。OAuth 允许第三方应用程序（小程序）在用户授权的前提下，安全地访问用户的某些资源或数据，而不需要直接获得用户的密码。</p><p>在微信小程序登录中，微信平台扮演**授权服务器（Authorization Server）**的角色，负责处理用户的身份验证、向第三方应用颁发访问令牌；小程序是第三方应用，需要通过 OAuth 授权流程从微信平台获取用户信息（如头像、昵称等）。</p><p>优点：不需要暴露用户的凭证，且用户可以为第三方应用授权访问特定资源，权限可控。</p><p>缺点：OAuth 的配置和实施比较复杂，尤其是在多个服务之间进行集成时。</p><p>OAuth2.0 一共有四种授权方式：授权码模式、隐式授权模式、密码凭证模式、客户端凭证式。</p><h3 id="_3-1-授权码模式" tabindex="-1"><a class="header-anchor" href="#_3-1-授权码模式"><span>3.1 授权码模式</span></a></h3><p>授权码模式（Authorization Code Grant）是 Auth2.0 中最常见、最安全地授权方式。别适合服务端应用，如网页应用。这种方式通过前后端分离，确保敏感信息不直接暴露给客户端。</p><p>授权码模式适合需要通过服务器和资源服务器交互的应用程序。由于授权码是在服务器之间传输的，减少了泄露敏感信息的风险。</p><p>流程：</p><ol><li>用户请求授权：客户端（应用）引导用户跳转到授权服务器的登录页面，用户在授权服务器上登录并同意授权。</li><li>用户授权并返回授权码：授权服务器在用户同意后，将一个短期有效的授权码（Authorization Code）返回给客户端（应用），通常是通过重定向到客户端提供的回调 URI。</li><li>客户端通过授权码换区访问令牌：客户端将授权码发送到授权服务器，授权服务器验证授权码后，返回一个访问令牌（Access Token）。</li><li>客户端使用访问令牌获取资源：客户端通过访问令牌向资源服务器（API 服务器）请求访问用户的受保护资源。</li></ol><p>特点：</p><ul><li>授权码模式最安全，因为敏感的访问令牌仅在后端服务器之间传递，避免了泄露到用户端。</li><li>适合需要长期用户会话和高安全性的应用场景。</li></ul><h3 id="_3-2-隐式授权模式" tabindex="-1"><a class="header-anchor" href="#_3-2-隐式授权模式"><span>3.2 隐式授权模式</span></a></h3><p>隐藏式授权模式（Implicit Grant）是一种更简化的授权方式，通常用于前端应用，如单页面应用（SPA）。这种模式不会使用授权码，而是直接返回访问令牌。这减少了授权流程的复杂性，但安全性较低。</p><p>隐式授权适用于客户端无法安全存储敏感信息的场景，如纯前端应用或移动端应用。</p><p>流程：</p><ol><li>用户请求授权：客户端引导用户跳转到授权服务器进行授权。</li><li>授权服务器直接返回访问令牌：用户授权后，授权服务器直接将访问令牌返回给客户端，而不必再经过授权码的交换过程。</li><li>客户端使用访问令牌获取资源：客户端使用访问令牌访问资源服务器。</li></ol><p>特点：</p><ul><li>直接返回访问令牌，避免了授权码交换的步骤，简化了流程。</li><li>因为访问令牌直接暴露给客户端，安全性相对较低。</li><li>令牌的有效期通常较短，以减少令牌被截获后的损害。</li></ul><h3 id="_3-3-密码凭证模式" tabindex="-1"><a class="header-anchor" href="#_3-3-密码凭证模式"><span>3.3 密码凭证模式</span></a></h3><p>在密码凭证模式（Resource Owner Password Credentials Grant）中，用户直接将其用户名和密码提供给客户端应用，客户端使用这些凭证请求授权服务器来获取访问令牌。这种方式仅适用于非常信任的应用程序，因为它需要用户的凭证直接传递给客户端。</p><p>密码凭证模式适用于用户对应用有完全信任的情况，如用户的密码管理工具、公司内部系统，或客户端与授权服务器是同一应用。</p><p>流程：</p><ol><li>用户直接输入用户名和密码：用户将自己的凭证（用户名和密码）直接提供给客户端。</li><li>客户端通过凭证请求访问令牌：客户端将用户名和密码传递给授权服务器，授权服务器验证凭证后返回一个访问令牌。</li><li>客户端使用访问令牌获取资源：客户端使用访问令牌从资源服务器获取资源。</li></ol><p>特点：</p><ul><li>需要将用户的密码直接传递给客户端，安全风险较高，不建议在不完全信任的环境中使用。</li><li>一般用于客户端与授权服务器处于同一信任域的场景。</li></ul><h3 id="_3-4-客户端凭证模式" tabindex="-1"><a class="header-anchor" href="#_3-4-客户端凭证模式"><span>3.4 客户端凭证模式</span></a></h3><p>客户端凭证模式（Client Credentials Grant）不涉及用户参与，适用于客户端与授权服务器之间的直接交互。客户端直接使用自己的凭证（如客户端 ID 和密钥）来获取访问令牌，用于访问自己拥有的资源或后台服务的资源。</p><p>客户端凭证模式适用于服务器之间的服务对服务（Service-to-Service）通信，或者客户端需要直接访问自己的受保护资源而不涉及用户的场景。</p><p>流程：</p><ol><li>客户端请求访问令牌：客户端使用自己的凭证（如客户端 ID 和密钥）向授权服务器请求访问令牌。</li><li>授权服务器返回访问令牌：授权服务器验证客户端的凭证，返回一个访问令牌。</li><li>客户端使用访问令牌获取资源：客户端使用访问令牌向资源服务器请求访问受保护的资源。</li></ol><p>特点：</p><ul><li>不涉及用户参与，客户端使用自己的凭证进行认证。</li><li>适合后台服务与服务之间的通信场景。</li></ul><h2 id="_4-bearer" tabindex="-1"><a class="header-anchor" href="#_4-bearer"><span>4 Bearer</span></a></h2><p>Bearer 认证是基于 OAuth 2.0 标准的一种简化的令牌认证机制。它通过携带一个访问令牌（Bearer Token）来授权客户端访问受保护的资源，而无需每次请求时都提供用户名和密码。</p><p>流程：</p><ol><li>用户授权：用户通过 OAuth 流程（如授权码模式）获取访问令牌。</li><li>令牌携带请求：客户端将获取的令牌作为平局，在每个请求的 HTTP 头的 Authorization 字段中携带：</li></ol><div class="language-text" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">Authorization: Bearer &lt;access_token&gt;</span>\n<span class="line"></span></code></pre></div><ol start="3"><li>服务器验证令牌：服务器通过验证该令牌的有效性（如验证令牌是否过期、是否合法）来决定是否授予访问权限。</li><li>返回资源或拒绝请求：如果令牌有效且具有访问权限，服务器返回所请求的资源；否则，返回 401 Unauthorized 响应。</li></ol><p>Bearer 令牌的特点：</p><ul><li>无状态：令牌本身鞋带所哟逇授权信息，服务器不需要维护会话状态（例如，不需要服务器端存储授权信息）</li><li>简便性：Bearer 认证不需要复杂的握手流程。客户端只需在请求中携带令牌，服务器验证后即可授予访问权限，适合分布式系统。</li><li>短期有效性：Bearer 令牌通常具有较短的有效期，令牌到期后客户端需要通过刷新令牌（Refresh Token）获取新的访问令牌，确保系统安全性。</li></ul><p>• 优点：token 是一次生成的，可以在多个请求中复用，并且可以设置过期时间或撤销，灵活性高。 • 缺点：安全性依赖传输层，Bearer 令牌不加密，若通过 HTTP 传输容易被截获，因此必须在 HTTPS 下使用，以确保令牌不被窃取；令牌失效管理复杂，如果令牌被窃取，攻击者可以在令牌有效期内进行重放攻击。短期令牌与刷新机制可以缓解这一问题，但仍需处理令牌的生命周期管理。</p><h2 id="_5-jwt" tabindex="-1"><a class="header-anchor" href="#_5-jwt"><span>5 JWT</span></a></h2><p>当前最常用的 token 编码方式是 <a href="https://datatracker.ietf.org/doc/html/rfc7519" target="_blank" rel="noopener noreferrer">JWT（JSON Web Token）</a>，它是 Bearer Token 的一个具体实现。</p><h3 id="_5-1-jwt-结构" tabindex="-1"><a class="header-anchor" href="#_5-1-jwt-结构"><span>5.1 JWT 结构</span></a></h3><p>JWT 由三部分组成，之间用 <code>.</code> 分隔，分别是：头部（Header）、有效载荷（Payload）、签名（Signature）。</p><ol><li>头部通常包含两部分：</li></ol><ul><li>alg：签名算法，如 HS256、RS256 等</li><li>typ：令牌的类型，通常为 JWT</li></ul>', 61)),
    createVNode(_component_CodeTabs, {
      id: "425",
      data: [{ "id": "json" }, { "id": "Base64 编码后" }]
    }, {
      title0: withCtx(({ value, isActive }) => _cache[0] || (_cache[0] = [
        createTextVNode("json")
      ])),
      title1: withCtx(({ value, isActive }) => _cache[1] || (_cache[1] = [
        createTextVNode("Base64 编码后")
      ])),
      tab0: withCtx(({ value, isActive }) => _cache[2] || (_cache[2] = [
        createBaseVNode(
          "div",
          {
            class: "language-json",
            "data-highlighter": "prismjs",
            "data-ext": "json",
            "data-title": "json"
          },
          [
            createBaseVNode("pre", null, [
              createBaseVNode("code", null, [
                createBaseVNode("span", { class: "line" }, [
                  createBaseVNode("span", { class: "token punctuation" }, "{"),
                  createTextVNode(),
                  createBaseVNode("span", { class: "token property" }, '"alg"'),
                  createBaseVNode("span", { class: "token operator" }, ":"),
                  createTextVNode(),
                  createBaseVNode("span", { class: "token string" }, '"HS256"'),
                  createBaseVNode("span", { class: "token punctuation" }, ","),
                  createTextVNode(),
                  createBaseVNode("span", { class: "token property" }, '"typ"'),
                  createBaseVNode("span", { class: "token operator" }, ":"),
                  createTextVNode(),
                  createBaseVNode("span", { class: "token string" }, '"JWT"'),
                  createTextVNode(),
                  createBaseVNode("span", { class: "token punctuation" }, "}")
                ]),
                createTextVNode("\n"),
                createBaseVNode("span", { class: "line" })
              ])
            ])
          ],
          -1
          /* HOISTED */
        )
      ])),
      tab1: withCtx(({ value, isActive }) => _cache[3] || (_cache[3] = [
        createBaseVNode(
          "div",
          {
            class: "language-text",
            "data-highlighter": "prismjs",
            "data-ext": "text",
            "data-title": "text"
          },
          [
            createBaseVNode("pre", null, [
              createBaseVNode("code", null, [
                createBaseVNode("span", { class: "line" }, "eyJhbGciOiAiSFMyNTYiLCAidHlwIjoiSldUIn0"),
                createTextVNode("\n"),
                createBaseVNode("span", { class: "line" })
              ])
            ])
          ],
          -1
          /* HOISTED */
        )
      ])),
      _: 1
      /* STABLE */
    }),
    _cache[9] || (_cache[9] = createBaseVNode(
      "ol",
      { start: "2" },
      [
        createBaseVNode("li", null, "有效载荷包含声明（Claims），他们可以是;")
      ],
      -1
      /* HOISTED */
    )),
    _cache[10] || (_cache[10] = createBaseVNode(
      "ul",
      null,
      [
        createBaseVNode("li", null, "注册声明（Registered Claims）：预定义的声明，如 sub（主题）、iat（签发时间）、exp（过期时间）等。"),
        createBaseVNode("li", null, "公共声明（Public Claims）：可以自定义，但需要避免冲突，通常用于应用内部的特定信息。"),
        createBaseVNode("li", null, "私有声明（Private Claims）：应用间的私有声明，用户自定义的数据。")
      ],
      -1
      /* HOISTED */
    )),
    createVNode(_component_CodeTabs, {
      id: "457",
      data: [{ "id": "json" }, { "id": "Base64 编码后" }]
    }, {
      title0: withCtx(({ value, isActive }) => _cache[4] || (_cache[4] = [
        createTextVNode("json")
      ])),
      title1: withCtx(({ value, isActive }) => _cache[5] || (_cache[5] = [
        createTextVNode("Base64 编码后")
      ])),
      tab0: withCtx(({ value, isActive }) => _cache[6] || (_cache[6] = [
        createBaseVNode(
          "div",
          {
            class: "language-json",
            "data-highlighter": "prismjs",
            "data-ext": "json",
            "data-title": "json"
          },
          [
            createBaseVNode("pre", null, [
              createBaseVNode("code", null, [
                createBaseVNode("span", { class: "line" }, [
                  createBaseVNode("span", { class: "token punctuation" }, "{"),
                  createTextVNode(),
                  createBaseVNode("span", { class: "token property" }, '"sub"'),
                  createBaseVNode("span", { class: "token operator" }, ":"),
                  createTextVNode(),
                  createBaseVNode("span", { class: "token string" }, '"1234567890"'),
                  createBaseVNode("span", { class: "token punctuation" }, ","),
                  createTextVNode(),
                  createBaseVNode("span", { class: "token property" }, '"name"'),
                  createBaseVNode("span", { class: "token operator" }, ":"),
                  createTextVNode(),
                  createBaseVNode("span", { class: "token string" }, '"John Doe"'),
                  createBaseVNode("span", { class: "token punctuation" }, ","),
                  createTextVNode(),
                  createBaseVNode("span", { class: "token property" }, '"iat"'),
                  createBaseVNode("span", { class: "token operator" }, ":"),
                  createTextVNode(),
                  createBaseVNode("span", { class: "token string" }, '"1516239022"'),
                  createTextVNode(),
                  createBaseVNode("span", { class: "token punctuation" }, "}")
                ]),
                createTextVNode("\n"),
                createBaseVNode("span", { class: "line" })
              ])
            ])
          ],
          -1
          /* HOISTED */
        )
      ])),
      tab1: withCtx(({ value, isActive }) => _cache[7] || (_cache[7] = [
        createBaseVNode(
          "div",
          {
            class: "language-text",
            "data-highlighter": "prismjs",
            "data-ext": "text",
            "data-title": "text"
          },
          [
            createBaseVNode("pre", null, [
              createBaseVNode("code", null, [
                createBaseVNode("span", { class: "line" }, "eyJzdWIiOiAiMTIzNDU2Nzg5MCIsICJuYW1lIjoiSm9obiBEb2UiLCAiaWF0IjoiMTUxNjIzOTAyMiJ9"),
                createTextVNode("\n"),
                createBaseVNode("span", { class: "line" })
              ])
            ])
          ],
          -1
          /* HOISTED */
        )
      ])),
      _: 1
      /* STABLE */
    }),
    _cache[11] || (_cache[11] = createStaticVNode('<details class="hint-container details"><summary>JWT 标准中注册的声明</summary><table><thead><tr><th style="text-align:left;">字段名</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;">iss (Issuer)</td><td style="text-align:left;">JWT 的签发者，大小写敏感的字符串或 URI</td></tr><tr><td style="text-align:left;">sub (Subject)</td><td style="text-align:left;">主题，可以用来鉴别一个用户</td></tr><tr><td style="text-align:left;">exp (Expiration Time)</td><td style="text-align:left;">JWT 过期时间</td></tr><tr><td style="text-align:left;">aud (Audience)</td><td style="text-align:left;">接收 JWT 的一方，大小写敏感的字符串或 URI，可以是特定的 App、服务或模块。服务器端的安全策略在签发和验证时的 aud 必须是一致的</td></tr><tr><td style="text-align:left;">iat (Issued At)</td><td style="text-align:left;">JWT 签发时间</td></tr><tr><td style="text-align:left;">nbf (Not Before)</td><td style="text-align:left;">JWT 生效时间</td></tr><tr><td style="text-align:left;">jti (JWT ID)</td><td style="text-align:left;">JWT ID，通常用于一次性消费的 Token</td></tr></tbody></table></details><ol start="3"><li>签名签名是使用 Header、Payload，以及密钥生成的。</li></ol><p>签名用于验证消息的完整性和真实性。签名生成的步骤：</p><ul><li>step1：创建签名输入，将 Header 和 Payload 用 <code>.</code> 连接</li><li>step2：签名，使用 Header 中的 alg 指定的算法，利用密钥对签名输入进行签名</li></ul><h3 id="_5-2-jwt-使用" tabindex="-1"><a class="header-anchor" href="#_5-2-jwt-使用"><span>5.2 JWT 使用</span></a></h3><p>客户端请求服务器生成并返回 JWT，客户端接受 JWT 后存储在本地（Cookie 或 Local Storage），并在后续请求中附带该 JWT。</p><p>服务器从请求的的 Authorization 头部提取 JWT 并进行解析，获取 Header、Payload 和 Signature。使用预先定义的密钥验证签名部分（用相同的加密算法和密钥对 header.payload 进行加密得到 Signature，与收到的 Signature 比较是否相同），确保 JWT 未被篡改。检查 Payload 中的声明，如过期时间等。最后根据 JWT 中的信息处理请求，授权访问资源。</p><details class="hint-container details"><summary>JWT 生成和验证示例代码</summary><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">package</span> utils</span>\n<span class="line"></span>\n<span class="line"><span class="token keyword">import</span> <span class="token punctuation">(</span></span>\n<span class="line">	<span class="token string">&quot;encoding/base64&quot;</span></span>\n<span class="line">	<span class="token string">&quot;fmt&quot;</span></span>\n<span class="line">	<span class="token string">&quot;time&quot;</span></span>\n<span class="line"></span>\n<span class="line">	<span class="token string">&quot;github.com/golang-jwt/jwt&quot;</span></span>\n<span class="line"><span class="token punctuation">)</span></span>\n<span class="line"></span>\n<span class="line"><span class="token keyword">func</span> <span class="token function">CreateToken</span><span class="token punctuation">(</span>ttl time<span class="token punctuation">.</span>Duration<span class="token punctuation">,</span> payload <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> privateKey <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">	<span class="token comment">// 1.1 将 base64 格式的私钥解码为 ASCII 格式</span></span>\n<span class="line">	decodedPrivateKey<span class="token punctuation">,</span> err <span class="token operator">:=</span> base64<span class="token punctuation">.</span>StdEncoding<span class="token punctuation">.</span><span class="token function">DecodeString</span><span class="token punctuation">(</span>privateKey<span class="token punctuation">)</span></span>\n<span class="line">	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>\n<span class="line">		<span class="token keyword">return</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;could not decode key: %w&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span></span>\n<span class="line">	<span class="token punctuation">}</span></span>\n<span class="line">	<span class="token comment">// 1.2 然后解析成 RSA 私钥格式</span></span>\n<span class="line">	key<span class="token punctuation">,</span> err <span class="token operator">:=</span> jwt<span class="token punctuation">.</span><span class="token function">ParseRSAPrivateKeyFromPEM</span><span class="token punctuation">(</span>decodedPrivateKey<span class="token punctuation">)</span></span>\n<span class="line">	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>\n<span class="line">		<span class="token keyword">return</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;create: parse key: %w&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span></span>\n<span class="line">	<span class="token punctuation">}</span></span>\n<span class="line"></span>\n<span class="line">	now <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">UTC</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>\n<span class="line"></span>\n<span class="line">	<span class="token comment">// 2. 定义 claims</span></span>\n<span class="line">	claims <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span>jwt<span class="token punctuation">.</span>MapClaims<span class="token punctuation">)</span> <span class="token comment">// 创建一个 JWT 负载(Claims)对象</span></span>\n<span class="line">	claims<span class="token punctuation">[</span><span class="token string">&quot;sub&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> payload       <span class="token comment">// sub 字段通常用于存储用户的唯一标识符</span></span>\n<span class="line">	claims<span class="token punctuation">[</span><span class="token string">&quot;exp&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> now<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>ttl<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Unix</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// Token 过期时间</span></span>\n<span class="line">	claims<span class="token punctuation">[</span><span class="token string">&quot;iat&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> now<span class="token punctuation">.</span><span class="token function">Unix</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">// Token 签发时间</span></span>\n<span class="line">	claims<span class="token punctuation">[</span><span class="token string">&quot;nbf&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> now<span class="token punctuation">.</span><span class="token function">Unix</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">// Token 生效时间</span></span>\n<span class="line"></span>\n<span class="line">	<span class="token comment">// 3. 使用 RS256 签名算法、RSA私钥进行签名</span></span>\n<span class="line">	<span class="token comment">// Header 中包括算法类型 RS256</span></span>\n<span class="line">	token<span class="token punctuation">,</span> err <span class="token operator">:=</span> jwt<span class="token punctuation">.</span><span class="token function">NewWithClaims</span><span class="token punctuation">(</span>jwt<span class="token punctuation">.</span>SigningMethodRS256<span class="token punctuation">,</span> claims<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">SignedString</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span></span>\n<span class="line">	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>\n<span class="line">		<span class="token keyword">return</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;create: sign token: %w&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span></span>\n<span class="line">	<span class="token punctuation">}</span></span>\n<span class="line"></span>\n<span class="line">	<span class="token comment">// 如果签名成功,则返回签名后的 JWT 字符串</span></span>\n<span class="line">	<span class="token keyword">return</span> token<span class="token punctuation">,</span> <span class="token boolean">nil</span></span>\n<span class="line"><span class="token punctuation">}</span></span>\n<span class="line"></span>\n<span class="line"><span class="token comment">// verify the access or refresh token</span></span>\n<span class="line"><span class="token comment">// 返回存储在 token payload 中的用户 id；token 过期或被操作则返回 error</span></span>\n<span class="line"><span class="token keyword">func</span> <span class="token function">ValidateToken</span><span class="token punctuation">(</span>token <span class="token builtin">string</span><span class="token punctuation">,</span> publicKey <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">  <span class="token comment">// 1. 将 base64 编码的 公钥解析成 ASCII 格式，再解析成 RSA 公钥</span></span>\n<span class="line">  <span class="token comment">// 公钥用于验证签名是否由对应私钥生成</span></span>\n<span class="line">	decodedPublicKey<span class="token punctuation">,</span> err <span class="token operator">:=</span> base64<span class="token punctuation">.</span>StdEncoding<span class="token punctuation">.</span><span class="token function">DecodeString</span><span class="token punctuation">(</span>publicKey<span class="token punctuation">)</span></span>\n<span class="line">	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>\n<span class="line">		<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;could not decode: %w&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span></span>\n<span class="line">	<span class="token punctuation">}</span></span>\n<span class="line">	key<span class="token punctuation">,</span> err <span class="token operator">:=</span> jwt<span class="token punctuation">.</span><span class="token function">ParseRSAPublicKeyFromPEM</span><span class="token punctuation">(</span>decodedPublicKey<span class="token punctuation">)</span></span>\n<span class="line">	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>\n<span class="line">		<span class="token keyword">return</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;validate: parse key: %w&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span></span>\n<span class="line">	<span class="token punctuation">}</span></span>\n<span class="line"></span>\n<span class="line">	<span class="token comment">// 2. 解析 JWT，并使用之前解析出的 RSA 公钥进行验证</span></span>\n<span class="line">  <span class="token comment">// 使用 jwt.Parse 方法解析 JWT，同时提供一个回调函数，用于指定公钥</span></span>\n<span class="line">	parsedToken<span class="token punctuation">,</span> err <span class="token operator">:=</span> jwt<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>token<span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>t <span class="token operator">*</span>jwt<span class="token punctuation">.</span>Token<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">		<span class="token comment">// 回调函数会检查签名算法是否是 RS256，并返回之前获得的 RSA 公钥</span></span>\n<span class="line">		<span class="token keyword">if</span> <span class="token boolean">_</span><span class="token punctuation">,</span> ok <span class="token operator">:=</span> t<span class="token punctuation">.</span>Method<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token operator">*</span>jwt<span class="token punctuation">.</span>SigningMethodRSA<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">!</span>ok <span class="token punctuation">{</span></span>\n<span class="line">			<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;unexpected method: %s&quot;</span><span class="token punctuation">,</span> t<span class="token punctuation">.</span>Header<span class="token punctuation">[</span><span class="token string">&quot;alg&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>\n<span class="line">		<span class="token punctuation">}</span></span>\n<span class="line">		<span class="token comment">// 签名算法正确，则返回之前解析出的 RSA 公钥，用来验证签名</span></span>\n<span class="line">		<span class="token keyword">return</span> key<span class="token punctuation">,</span> <span class="token boolean">nil</span></span>\n<span class="line">	<span class="token punctuation">}</span><span class="token punctuation">)</span></span>\n<span class="line"></span>\n<span class="line">	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>\n<span class="line">		<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;validate: %w&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span></span>\n<span class="line">	<span class="token punctuation">}</span></span>\n<span class="line"></span>\n<span class="line">	<span class="token comment">// 将解析出的 JWT Payload 数据转换为 jwt.MapClaims 类型</span></span>\n<span class="line">	claims<span class="token punctuation">,</span> ok <span class="token operator">:=</span> parsedToken<span class="token punctuation">.</span>Claims<span class="token punctuation">.</span><span class="token punctuation">(</span>jwt<span class="token punctuation">.</span>MapClaims<span class="token punctuation">)</span></span>\n<span class="line">	<span class="token keyword">if</span> <span class="token operator">!</span>ok <span class="token operator">||</span> <span class="token operator">!</span>parsedToken<span class="token punctuation">.</span>Valid <span class="token punctuation">{</span></span>\n<span class="line">		<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;validate: invalid token&quot;</span><span class="token punctuation">)</span></span>\n<span class="line">	<span class="token punctuation">}</span></span>\n<span class="line"></span>\n<span class="line">	<span class="token comment">// 如果 JWT 验证成功,则返回负载中的 &quot;sub&quot; 字段,这通常是用户的唯一标识符。</span></span>\n<span class="line">	<span class="token keyword">return</span> claims<span class="token punctuation">[</span><span class="token string">&quot;sub&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token boolean">nil</span></span>\n<span class="line"><span class="token punctuation">}</span></span>\n<span class="line"></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details>', 8))
  ]);
}
const authentication_html = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render], ["__file", "authentication.html.vue"]]);
const data = JSON.parse('{"path":"/dev/authentication.html","title":"认证","lang":"zh-CN","frontmatter":{"lang":"zh-CN","title":"认证","description":null,"article":false,"date":"2024-03-02T00:00:00.000Z","order":1},"headers":[{"level":2,"title":"1 Basic","slug":"_1-basic","link":"#_1-basic","children":[]},{"level":2,"title":"2 Digest","slug":"_2-digest","link":"#_2-digest","children":[]},{"level":2,"title":"3 OAuth","slug":"_3-oauth","link":"#_3-oauth","children":[{"level":3,"title":"3.1 授权码模式","slug":"_3-1-授权码模式","link":"#_3-1-授权码模式","children":[]},{"level":3,"title":"3.2 隐式授权模式","slug":"_3-2-隐式授权模式","link":"#_3-2-隐式授权模式","children":[]},{"level":3,"title":"3.3 密码凭证模式","slug":"_3-3-密码凭证模式","link":"#_3-3-密码凭证模式","children":[]},{"level":3,"title":"3.4 客户端凭证模式","slug":"_3-4-客户端凭证模式","link":"#_3-4-客户端凭证模式","children":[]}]},{"level":2,"title":"4 Bearer","slug":"_4-bearer","link":"#_4-bearer","children":[]},{"level":2,"title":"5 JWT","slug":"_5-jwt","link":"#_5-jwt","children":[{"level":3,"title":"5.1 JWT 结构","slug":"_5-1-jwt-结构","link":"#_5-1-jwt-结构","children":[]},{"level":3,"title":"5.2 JWT 使用","slug":"_5-2-jwt-使用","link":"#_5-2-jwt-使用","children":[]}]}],"git":{"createdTime":1735022911000,"updatedTime":1735022911000,"contributors":[{"name":"Hertz","username":"Hertz","email":"hanzhuosoul@gmail.com","commits":1,"url":"https://github.com/Hertz"}]},"readingTime":{"minutes":13.65,"words":4094},"filePathRelative":"dev/authentication.md","localizedDate":"2024年3月2日","excerpt":"<ul>\\n<li>\\n<p>认证（Authentication, 简写 authn）：验证某个用户是否具有访问<strong>系统</strong>的权限。</p>\\n</li>\\n<li>\\n<p>授权（Authorization, 简写 authz）：验证某个用户是否具有访问<strong>某个资源</strong>的权限。</p>\\n</li>\\n</ul>\\n<p>四种常见的认证方式是：Basic, Digest, OAuth, Bearer</p>\\n<h2>1 Basic</h2>\\n<p>将 <code>用户名:密码</code> 进行 base64 编码后，放到 HTTP Authorization Header 中。</p>"}');
export {
  authentication_html as comp,
  data
};
