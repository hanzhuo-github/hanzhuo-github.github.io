import { c as createElementBlock, f as createBaseVNode, g as createTextVNode, a as createCommentVNode, b as createStaticVNode, o as openBlock } from "./app-BhCVjEdW.js";
import { _ as _export_sfc } from "./plugin-vue_export-helper-1tPrXgE0.js";
const _sfc_main = {};
function _sfc_render(_ctx, _cache) {
  return openBlock(), createElementBlock("div", null, [
    _cache[0] || (_cache[0] = createBaseVNode(
      "p",
      null,
      [
        createBaseVNode("code", null, "BigInt"),
        createTextVNode(" 是一种特殊的数字类型，提供了一种方法来表示大于 "),
        createBaseVNode("code", null, "2^53 - 1"),
        createTextVNode(" 的整数，支持任意长度的整数。")
      ],
      -1
      /* HOISTED */
    )),
    _cache[1] || (_cache[1] = createBaseVNode(
      "blockquote",
      null,
      [
        createBaseVNode("p", null, [
          createTextVNode("更多内容请查看："),
          createBaseVNode("a", {
            href: "https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/BigInt",
            target: "_blank",
            rel: "noopener noreferrer"
          }, "BigInt MDN")
        ])
      ],
      -1
      /* HOISTED */
    )),
    createCommentVNode(" more "),
    _cache[2] || (_cache[2] = createStaticVNode('<h2 id="_1-快速介绍" tabindex="-1"><a class="header-anchor" href="#_1-快速介绍"><span>1. 快速介绍</span></a></h2><p>BigInt 可以通过两种方式创建：1. 在整数字面量后面加 <code>n</code>; 2. 调用 <code>BigInt</code> 函数，从传入的字符串或数字生成 bigint。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token comment">// 1. 创建</span></span>\n<span class="line"><span class="token keyword">const</span> bigint <span class="token operator">=</span> <span class="token number">1n</span><span class="token punctuation">;</span></span>\n<span class="line"><span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token function">BigInt</span><span class="token punctuation">(</span><span class="token string">&quot;1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"><span class="token keyword">const</span> c <span class="token operator">=</span> <span class="token function">BigInt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line"><span class="token keyword">typeof</span> <span class="token number">1n</span><span class="token punctuation">;</span> <span class="token comment">// &#39;bigint&#39;</span></span>\n<span class="line"></span>\n<span class="line"><span class="token comment">// 2. 运算</span></span>\n<span class="line"><span class="token comment">// 2.1 四则运算</span></span>\n<span class="line"><span class="token number">1n</span> <span class="token operator">+</span> <span class="token number">2n</span><span class="token punctuation">;</span> <span class="token comment">// 3n</span></span>\n<span class="line"><span class="token number">5n</span> <span class="token operator">/</span> <span class="token number">2n</span><span class="token punctuation">;</span> <span class="token comment">// 2n  除法会舍去小数部分</span></span>\n<span class="line"><span class="token number">1n</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">// TypeError: Cannot mix BigInt and other types, use explicit conversions</span></span>\n<span class="line"></span>\n<span class="line"><span class="token comment">// 不能将 bigint 和常规 Number 混合使用</span></span>\n<span class="line"><span class="token comment">// 如果需要混合使用，请显式转换</span></span>\n<span class="line"><span class="token keyword">const</span> number <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span></span>\n<span class="line"><span class="token function">alert</span><span class="token punctuation">(</span>bigint <span class="token operator">+</span> <span class="token function">BigInt</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3 （值为 3n）</span></span>\n<span class="line"><span class="token function">alert</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span>bigint<span class="token punctuation">)</span> <span class="token operator">+</span> number<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3</span></span>\n<span class="line"></span>\n<span class="line"><span class="token comment">// 2.2 不支持一元加法</span></span>\n<span class="line"><span class="token function">alert</span><span class="token punctuation">(</span><span class="token operator">+</span>bigint<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// TypeError: Cannot convert a BigInt value to a number</span></span>\n<span class="line"></span>\n<span class="line"><span class="token comment">// 2.3 比较运算</span></span>\n<span class="line"><span class="token comment">// bigint 和 Number 可以进行比较</span></span>\n<span class="line"><span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">2n</span> <span class="token operator">&gt;</span> <span class="token number">1n</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span></span>\n<span class="line"><span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">2n</span> <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span></span>\n<span class="line"></span>\n<span class="line"><span class="token comment">// bigint 和 Number 只能 ==</span></span>\n<span class="line"><span class="token comment">// 由于是不同类型，=== 一定是 false</span></span>\n<span class="line"><span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">==</span> <span class="token number">1n</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span></span>\n<span class="line"><span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">===</span> <span class="token number">1n</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span></span>\n<span class="line"></span>\n<span class="line"><span class="token comment">// 2.4 布尔运算</span></span>\n<span class="line"><span class="token comment">// 0n 为</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-polyfill" tabindex="-1"><a class="header-anchor" href="#_2-polyfill"><span>2. Polyfill</span></a></h2><p>目前没有一个通用的好用的 polyfill。</p><p>但是 <a href="https://github.com/GoogleChromeLabs/jsbi" target="_blank" rel="noopener noreferrer">JSBI</a> 库的开发者提出了另一种解决方案。该库使用自己的方式实现的大数，可以用它来代替原生 bigint。</p><table><thead><tr><th style="text-align:left;">操作</th><th style="text-align:left;">原生 <code>BigInt</code></th><th style="text-align:left;">JSBI</th></tr></thead><tbody><tr><td style="text-align:left;">从 Number 创建</td><td style="text-align:left;"><code>a = BigInt(100)</code></td><td style="text-align:left;"><code>a = JSBI.BigInt(100)</code></td></tr><tr><td style="text-align:left;">加法</td><td style="text-align:left;"><code>c = a + b</code></td><td style="text-align:left;"><code>c = JSBI.add(q, b)</code></td></tr><tr><td style="text-align:left;">减法</td><td style="text-align:left;"><code>c = a - b</code></td><td style="text-align:left;"><code>c = JSBI.subtract(a, b)</code></td></tr><tr><td style="text-align:left;">...</td><td style="text-align:left;">...</td><td style="text-align:left;">...</td></tr></tbody></table><p>对于支持 bigint 的浏览器，可以使用 polyfill（Babel 插件）将 JSBI 调用转换为原生的 bigint。对于那些不支持 bigint 的浏览器，原样使用 JSBI 代码即可。</p>', 8))
  ]);
}
const bigint_html = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render], ["__file", "bigint.html.vue"]]);
const data = JSON.parse('{"path":"/front-end/js/grammar/bigint.html","title":"BigInt","lang":"zh-CN","frontmatter":{"lang":"zh-CN","title":"BigInt","description":null,"article":false,"date":"2023-11-26T00:00:00.000Z"},"headers":[{"level":2,"title":"1. 快速介绍","slug":"_1-快速介绍","link":"#_1-快速介绍","children":[]},{"level":2,"title":"2. Polyfill","slug":"_2-polyfill","link":"#_2-polyfill","children":[]}],"git":{"createdTime":1735022911000,"updatedTime":1735022911000,"contributors":[{"name":"Hertz","username":"Hertz","email":"hanzhuosoul@gmail.com","commits":1,"url":"https://github.com/Hertz"}]},"readingTime":{"minutes":1.48,"words":444},"filePathRelative":"front-end/js/grammar/bigint.md","localizedDate":"2023年11月26日","excerpt":"<p><code>BigInt</code> 是一种特殊的数字类型，提供了一种方法来表示大于 <code>2^53 - 1</code> 的整数，支持任意长度的整数。</p>\\n<blockquote>\\n<p>更多内容请查看：<a href=\\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/BigInt\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">BigInt MDN</a></p>\\n</blockquote>\\n"}');
export {
  bigint_html as comp,
  data
};
