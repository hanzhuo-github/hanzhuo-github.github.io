import { c as createElementBlock, b as createStaticVNode, o as openBlock } from "./app-BhCVjEdW.js";
import { _ as _export_sfc } from "./plugin-vue_export-helper-1tPrXgE0.js";
const _sfc_main = {};
function _sfc_render(_ctx, _cache) {
  return openBlock(), createElementBlock("div", null, _cache[0] || (_cache[0] = [
    createStaticVNode('<p>后入先出（Last In First Out, LIFO）</p><h2 id="栈的应用" tabindex="-1"><a class="header-anchor" href="#栈的应用"><span>栈的应用</span></a></h2><h3 id="函数调用栈" tabindex="-1"><a class="header-anchor" href="#函数调用栈"><span>函数调用栈</span></a></h3><p>操作系统给每个线程分配了一块独立的内存空间，这块内存被组织成“栈”这种结构，用来存储函数调用时的临时变量。每进入一个函数，就会将临时变量作为一个栈帧入栈，当被调用函数执行完成，返回之后，将这个对应的栈帧出栈。</p><h3 id="表达式求值" tabindex="-1"><a class="header-anchor" href="#表达式求值"><span>表达式求值</span></a></h3><p>编译器可以通过两个栈来实现四则运算。一个栈用来保存操作数，一个栈用来保存运算符。</p><p>从左向右遍历表达式，遇到数字时，直接入栈。遇到运算符时，与栈顶的运算符进行比较。如果比栈顶元素的优先级高，就入栈；否则，从运算符栈中取出运算符，从操作数栈栈顶取出 2 个操作数，进行运算后，将结果压入操作数栈。继续比较当前运算符和新的栈顶运算符。</p><h3 id="括号匹配" tabindex="-1"><a class="header-anchor" href="#括号匹配"><span>括号匹配</span></a></h3><p>用栈保存未被匹配的左括号，从左到右扫描字符串，当扫描到左括号时，将其压入栈中，当扫描到右括号时，取出栈顶的左括号，判断能否匹配，如果能则继续（否则，判定括号不匹配）。匹配完之后，栈为空，否则判定括号不匹配。</p><h3 id="浏览器回退、前进" tabindex="-1"><a class="header-anchor" href="#浏览器回退、前进"><span>浏览器回退、前进</span></a></h3><p>使用两个栈来实现。当按顺序访问页面 a、b、c 后，按照其顺序，将 a、b、c 压入栈 1。当点击回退时，将栈 1 的栈顶取出压入栈 2 中。当前进时，将栈 2 的栈顶取出压入栈 1。栈 1 没有数据了的话，说明不能再回退了；栈 2 没有数据了的话，说明不能再前进了。</p>', 11)
  ]));
}
const _4Stack_html = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render], ["__file", "4-stack.html.vue"]]);
const data = JSON.parse('{"path":"/coding/data-structure/4-stack.html","title":"栈","lang":"zh-CN","frontmatter":{"lang":"zh-CN","title":"栈","description":null,"article":false,"date":"2023-08-21T00:00:00.000Z","order":4},"headers":[{"level":2,"title":"栈的应用","slug":"栈的应用","link":"#栈的应用","children":[{"level":3,"title":"函数调用栈","slug":"函数调用栈","link":"#函数调用栈","children":[]},{"level":3,"title":"表达式求值","slug":"表达式求值","link":"#表达式求值","children":[]},{"level":3,"title":"括号匹配","slug":"括号匹配","link":"#括号匹配","children":[]},{"level":3,"title":"浏览器回退、前进","slug":"浏览器回退、前进","link":"#浏览器回退、前进","children":[]}]}],"git":{"createdTime":1735022911000,"updatedTime":1735022911000,"contributors":[{"name":"Hertz","username":"Hertz","email":"hanzhuosoul@gmail.com","commits":1,"url":"https://github.com/Hertz"}]},"readingTime":{"minutes":1.59,"words":478},"filePathRelative":"coding/data-structure/4-stack.md","localizedDate":"2023年8月21日","excerpt":"<p>后入先出（Last In First Out, LIFO）</p>\\n<h2>栈的应用</h2>\\n<h3>函数调用栈</h3>\\n<p>操作系统给每个线程分配了一块独立的内存空间，这块内存被组织成“栈”这种结构，用来存储函数调用时的临时变量。每进入一个函数，就会将临时变量作为一个栈帧入栈，当被调用函数执行完成，返回之后，将这个对应的栈帧出栈。</p>\\n<h3>表达式求值</h3>\\n<p>编译器可以通过两个栈来实现四则运算。一个栈用来保存操作数，一个栈用来保存运算符。</p>\\n<p>从左向右遍历表达式，遇到数字时，直接入栈。遇到运算符时，与栈顶的运算符进行比较。如果比栈顶元素的优先级高，就入栈；否则，从运算符栈中取出运算符，从操作数栈栈顶取出 2 个操作数，进行运算后，将结果压入操作数栈。继续比较当前运算符和新的栈顶运算符。</p>"}');
export {
  _4Stack_html as comp,
  data
};
