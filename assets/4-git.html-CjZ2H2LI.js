import { c as createElementBlock, b as createStaticVNode, o as openBlock } from "./app-DERZZvM1.js";
import { _ as _export_sfc } from "./plugin-vue_export-helper-1tPrXgE0.js";
const _sfc_main = {};
function _sfc_render(_ctx, _cache) {
  return openBlock(), createElementBlock("div", null, _cache[0] || (_cache[0] = [
    createStaticVNode('<h2 id="_1-功能分支工作流" tabindex="-1"><a class="header-anchor" href="#_1-功能分支工作流"><span>1 功能分支工作流</span></a></h2><p>功能分支工作流适合开发团队相对固定、规模较小的项目。</p><p>开发新功能时，基于 master 分支新建一个功能分支，开发完之后合并到 master 分支。</p><p>在合并到 master 分支时，需要提交 PR（Pull Request），而非直接将代码 merge 到 master 分支。这样可以把分支代码提供给团队开发人员进行 CR（Code Review）。</p><p>github 的 Merge pull request 提供了三种 Merge 方法：1）Create a merge commit：相当于 <code>git merge --no-ff</code>，生成一个 merge commit；2）Squash and merge：相当于 <code>git merge --squash</code>，使该 pull request 上的所有 commit 都合并成一个 commit；3）Rebase and merge：底层是 <code>git rebase</code>，会将 pull request 上的所有提交历史按照原有顺序依次添加到 master 分支的 Head。</p><h2 id="_2-git-flow-工作流" tabindex="-1"><a class="header-anchor" href="#_2-git-flow-工作流"><span>2 Git Flow 工作流</span></a></h2><p>Git Flow 工作流比较适合开发团队相对固定，规模较大的项目。</p><p>Git Flow 定义了 5 种分支：master, develop, feature, release, hotfix。</p><table><thead><tr><th style="text-align:left;">分支名</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;">master</td><td style="text-align:left;">该分支上的最新代码永远是发布状态，不能直接在该分支上发布。master 分支每合并一个 hotfix 或 release 分支，都会打一个版本标签。</td></tr><tr><td style="text-align:left;">develop</td><td style="text-align:left;">开发中的最新代码。该分支只做合并操作，不能直接在该分支上开发。</td></tr><tr><td style="text-align:left;">feature</td><td style="text-align:left;">新功能开发。基于 develop 分支新建 feature 分支，名称建议为 feature/xxx-xxx。功能开发完之后，合并到 develop 并删除分支。<br><br>注意：申请合并之前，先 pull 一下 develop 分支解决冲突后，再申请合并。</td></tr><tr><td style="text-align:left;">release</td><td style="text-align:left;">发布阶段的预发布分支。基于 develop 分支创建，名称建议为 release/xxx-xxx。<br><br>流程：v1.0.0 版本的功能全部开发测试完后，提交到 develop 分支；基于 develop 分支创建 release/1.0.0 分支，并提交测试，测试中遇到的问题在 release 分支上修改；通过最终测试后，再讲 release 分支合并到 master 和 develop，并在 master 分支打上 v1.0.0 的版本标签，最后删除 release/1.0.0 分支。</td></tr><tr><td style="text-align:left;">hotfix</td><td style="text-align:left;">维护阶段的紧急修复分支。基于 master 分支创建，修复完成后合并到 master。名称建议为 hotfix/xxx-xxx。<br><br>流程：线上某个版本出现 Bug 后，从 master 检出对应版本的代码，创建 hotfix 分支，并在 hotfix 分支上修复问题；问题修复后，将 hotfix 合并到 master 和 develop 分支，并在 master 分支打上修复后的版本标签，最后删除 hotfix 分支。</td></tr></tbody></table><p>如果在当前开发阶段，线上突发 bug，我们要停下手中的工作，修复线上的 bug。假设现在的版本是 <code>0.9.0</code>，步骤：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">$ <span class="token function">git</span> stash  <span class="token comment"># 1. 目前在分支 feature/a。开发只完成了一部分，不想提交，可以将修改暂存</span></span>\n<span class="line">$ <span class="token function">git</span> checkout <span class="token parameter variable">-b</span> hotfix/print-error master <span class="token comment"># 2. 基于 master 建立 hotfix 分支</span></span>\n<span class="line"><span class="token comment"># ... 编辑器中修复 bug</span></span>\n<span class="line">$ <span class="token function">git</span> commit <span class="token parameter variable">-a</span> <span class="token parameter variable">-m</span> <span class="token string">&#39;fix: fix print message error bug&#39;</span> <span class="token comment"># 3. 提交修复</span></span>\n<span class="line"></span>\n<span class="line">$ <span class="token function">git</span> checkout development</span>\n<span class="line">$ <span class="token function">git</span> merge --no-ff hotfix/print-error <span class="token comment"># 4.1 合并到 develop 分支</span></span>\n<span class="line">$ <span class="token function">git</span> checkout master</span>\n<span class="line">$ <span class="token function">git</span> merge --no-ff hotfix/print-error <span class="token comment"># 4.2 合并到 master 分支</span></span>\n<span class="line"></span>\n<span class="line">$ <span class="token function">git</span> tag <span class="token parameter variable">-a</span> v0.9.1 <span class="token parameter variable">-m</span> <span class="token string">&#39;fix log bug&#39;</span> <span class="token comment"># 5. master 分支打 tag</span></span>\n<span class="line"><span class="token comment"># ... 6. 编译代码，将编译好的二进制更新到生产环境中</span></span>\n<span class="line">$ <span class="token function">git</span> branch <span class="token parameter variable">-d</span> hotfix/print-error <span class="token comment"># 7. 删除 hotfix 分支</span></span>\n<span class="line"></span>\n<span class="line">$ <span class="token function">git</span> checkout feature/a      <span class="token comment"># 8. 切换到原开发分支</span></span>\n<span class="line">$ <span class="token function">git</span> merge --no-off develop  <span class="token comment"># 9. develop 有更新，同步一下</span></span>\n<span class="line">$ <span class="token function">git</span> stash pop               <span class="token comment"># 10. 恢复修复前的工作状态</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-forking-工作流" tabindex="-1"><a class="header-anchor" href="#_3-forking-工作流"><span>3 Forking 工作流</span></a></h2><p>Forking 工作流适合开源项目，或者开发者不固定的项目。</p><p>开发者 A 拥有一个远程仓库，开发者 B 也想参与该项目，B 就可以 fork 一份 A 的远程仓库到自己的 Github 账号下。B 在自己的项目中进行开发，开发完成后，B 给 A 提交一个 PR。这时，A 会收到通知有新的 PR，A 查看 PR 并进行 code review。如果有问题，A 直接在 PR 页面进行评论，B 根据评论做进一步修改。最后 A 通过 B 的 PR 请求，将代码合并进了 A 的仓库。</p><p>B fork 项目后，在本地对项目做修改，步骤：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">$ <span class="token function">git</span> clone <span class="token operator">&lt;</span>fork 后自己的代码仓库地址<span class="token operator">&gt;</span></span>\n<span class="line">$ <span class="token builtin class-name">cd</span> <span class="token operator">&lt;</span>project-dir<span class="token operator">&gt;</span></span>\n<span class="line">$ <span class="token function">git</span> remote <span class="token function">add</span> upstream <span class="token operator">&lt;</span>A 的代码仓库地址地址<span class="token operator">&gt;</span></span>\n<span class="line">$ <span class="token function">git</span> remote set-url <span class="token parameter variable">--push</span> upstream no_push <span class="token comment"># 不向 upstream master 进行 push</span></span>\n<span class="line"></span>\n<span class="line">$ <span class="token function">git</span> remote <span class="token parameter variable">-v</span> <span class="token comment"># 确认设置的 remotes 有效</span></span>\n<span class="line">origin <span class="token operator">&lt;</span>fork 后自己的代码仓库地址<span class="token operator">&gt;</span> <span class="token punctuation">(</span>fetch<span class="token punctuation">)</span></span>\n<span class="line">origin <span class="token operator">&lt;</span>fork 后自己的代码仓库地址<span class="token operator">&gt;</span> <span class="token punctuation">(</span>push<span class="token punctuation">)</span></span>\n<span class="line">upstream <span class="token operator">&lt;</span>A 代码仓库地址<span class="token operator">&gt;</span> <span class="token punctuation">(</span>fetch<span class="token punctuation">)</span></span>\n<span class="line">upstream <span class="token operator">&lt;</span>A 代码仓库地址<span class="token operator">&gt;</span> <span class="token punctuation">(</span>push<span class="token punctuation">)</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>创建功能分支之前，要同步本地仓库的 master 分支为最新状态。</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">$ <span class="token function">git</span> fetch upstream</span>\n<span class="line">$ <span class="token function">git</span> checkout master</span>\n<span class="line">$ <span class="token function">git</span> rebase upstream/master</span>\n<span class="line"></span>\n<span class="line">$ <span class="token function">git</span> checkout <span class="token parameter variable">-b</span> feature/add-function</span>\n<span class="line"></span></code></pre></div><p>开发完代码之后，commit 之前还要再次同步 feature 跟 upstream/master</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">$ <span class="token function">git</span> fetch upstream</span>\n<span class="line">$ <span class="token function">git</span> rebase upstream/master</span>\n<span class="line"></span>\n<span class="line">$ <span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span></span>\n<span class="line">$ <span class="token function">git</span> commit</span>\n<span class="line"></span></code></pre></div><p>合并到 master 中时，可能有好几个 commit，我们往往只希望有一个，可以用 <code>git rebase</code> 进行合并</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">$ <span class="token function">git</span> rebase <span class="token parameter variable">-i</span> origin/master</span>\n<span class="line"></span></code></pre></div><p>开发完成后要讲功能分支 push 到个人远程代码仓库。在个人远程仓库页面创建 pull request。</p><blockquote><p>原文：<a href="https://time.geekbang.com/column/article/382342?utm_campaign=geektime_search&amp;utm_content=geektime_search&amp;utm_medium=geektime_search&amp;utm_source=geektime_search&amp;utm_term=geektime_search" target="_blank" rel="noopener noreferrer">工作流设计</a></p></blockquote>', 24)
  ]));
}
const _4Git_html = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render], ["__file", "4-git.html.vue"]]);
const data = JSON.parse('{"path":"/front-end/configuration/4-git.html","title":"Git 工作流","lang":"zh-CN","frontmatter":{"lang":"zh-CN","title":"Git 工作流","description":null,"article":false,"date":"2024-02-01T00:00:00.000Z","order":4},"headers":[{"level":2,"title":"1 功能分支工作流","slug":"_1-功能分支工作流","link":"#_1-功能分支工作流","children":[]},{"level":2,"title":"2 Git Flow 工作流","slug":"_2-git-flow-工作流","link":"#_2-git-flow-工作流","children":[]},{"level":2,"title":"3 Forking 工作流","slug":"_3-forking-工作流","link":"#_3-forking-工作流","children":[]}],"git":{"createdTime":1735022911000,"updatedTime":1735022911000,"contributors":[{"name":"Hertz","username":"Hertz","email":"hanzhuosoul@gmail.com","commits":1,"url":"https://github.com/Hertz"}]},"readingTime":{"minutes":4.38,"words":1314},"filePathRelative":"front-end/configuration/4-git.md","localizedDate":"2024年2月1日","excerpt":"<h2>1 功能分支工作流</h2>\\n<p>功能分支工作流适合开发团队相对固定、规模较小的项目。</p>\\n<p>开发新功能时，基于 master 分支新建一个功能分支，开发完之后合并到 master 分支。</p>\\n<p>在合并到 master 分支时，需要提交 PR（Pull Request），而非直接将代码 merge 到 master 分支。这样可以把分支代码提供给团队开发人员进行 CR（Code Review）。</p>\\n<p>github 的 Merge pull request 提供了三种 Merge 方法：1）Create a merge commit：相当于 <code>git merge --no-ff</code>，生成一个 merge commit；2）Squash and merge：相当于 <code>git merge --squash</code>，使该 pull request 上的所有 commit 都合并成一个 commit；3）Rebase and merge：底层是 <code>git rebase</code>，会将 pull request 上的所有提交历史按照原有顺序依次添加到 master 分支的 Head。</p>"}');
export {
  _4Git_html as comp,
  data
};
