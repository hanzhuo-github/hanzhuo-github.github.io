import { c as createElementBlock, b as createStaticVNode, o as openBlock } from "./app-BhCVjEdW.js";
import { _ as _export_sfc } from "./plugin-vue_export-helper-1tPrXgE0.js";
const _sfc_main = {};
function _sfc_render(_ctx, _cache) {
  return openBlock(), createElementBlock("div", null, _cache[0] || (_cache[0] = [
    createStaticVNode('<p>API 风格主要有三种：</p><ul><li>REST（REpresentational State Transfer，表现层状态转移）</li><li>RPC（Remote Procedure Call，远程过程调用）</li><li><a href="https://graphql.cn/" target="_blank" rel="noopener noreferrer">GraphQL</a>。</li></ul><h2 id="_1-restful-api" tabindex="-1"><a class="header-anchor" href="#_1-restful-api"><span>1 RESTful API</span></a></h2><table><thead><tr><th style="text-align:left;">HTTP 方法</th><th style="text-align:left;">行为</th><th style="text-align:left;">URI</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">GET</td><td style="text-align:left;">获取资源列表</td><td style="text-align:left;">/users</td><td style="text-align:left;">获取用户列表</td></tr><tr><td style="text-align:left;">GET</td><td style="text-align:left;">获取某个具体资源</td><td style="text-align:left;">/users/zhangsan</td><td style="text-align:left;">获取 zhangsan 用户的详细信息</td></tr><tr><td style="text-align:left;">POST</td><td style="text-align:left;">创建一个新资源</td><td style="text-align:left;">/users</td><td style="text-align:left;">创建一个新用户</td></tr><tr><td style="text-align:left;">PUT</td><td style="text-align:left;">以整体的方式更新一个资源</td><td style="text-align:left;">/users/zhangsan</td><td style="text-align:left;">更新 zhangsan 用户</td></tr><tr><td style="text-align:left;">PATCH</td><td style="text-align:left;">更新一个资源的某个或某些属性</td><td style="text-align:left;">/users/zhangsan</td><td style="text-align:left;">更新 zhangsan 用户的某些属性</td></tr><tr><td style="text-align:left;">DELETE</td><td style="text-align:left;">删除一个资源</td><td style="text-align:left;">/users/zhangsan</td><td style="text-align:left;">删除 zhangsan 用户</td></tr></tbody></table><p>注意：</p><ul><li><p>对资源进行状态、属性的变更，要用 PUT 方法，POST 方法仅用来创建或者批量删除这两种场景。</p></li><li><p>批量删除：</p><ul><li>发起多个 DELETE 请求，</li><li>操作路径中带多个 id，中间用分隔符。如 <code>DELETE /users?ids=1,2,3</code>，</li><li>使用 POST 方式批量删除，body 中传入要删除的资源列表。</li></ul></li></ul><h3 id="_1-1-uri-映射" tabindex="-1"><a class="header-anchor" href="#_1-1-uri-映射"><span>1.1 URI 映射</span></a></h3><ul><li>URI 资源名使用名词复数 <code>域名/资源名复数</code>，单个特定资源使用 <code>域名/资源名复数/资源名称</code></li><li>URI 结尾不应包含 <code>/</code></li><li>URI 路径用小写</li><li>URI 中不能出现下划线 <code>_</code>，必须用中杠线 <code>-</code> 代替</li><li>避免层级过深，超过 2 层可以将其他资源转化为 <code>?</code> 参数</li></ul><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">/schools/qinghua/classes/rooma/students/zhangsan  <span class="token comment"># 不推荐</span></span>\n<span class="line">/students?school<span class="token operator">=</span>qinghua<span class="token operator">&amp;</span><span class="token assign-left variable">class</span><span class="token operator">=</span>rooma              <span class="token comment"># 推荐</span></span>\n<span class="line"></span></code></pre></div><ul><li>对于操作，可以按照如下方式映射为 REST 资源： <ul><li>将一个操作变成资源的一个属性。如，禁用某个用户：<code>/users/zhangsan?active=false</code></li><li>将操作当成资源的嵌套资源。如，Github 加星：<code>PUT /gists/:id/star</code>；Github 取消加星：<code>DELETE /gists/:id/star</code></li><li>如果上面的方法不能解决问题，可以打破规范。如，登录不属于任何一个资源，直接设计为 <code>/login</code></li></ul></li></ul><blockquote><p><a href="https://docs.github.com/en/rest?apiVersion=2022-11-28" target="_blank" rel="noopener noreferrer">Github RESTful API 文档</a></p></blockquote><h3 id="_1-2-统一分页、过滤、排序、搜索功能" tabindex="-1"><a class="header-anchor" href="#_1-2-统一分页、过滤、排序、搜索功能"><span>1.2 统一分页、过滤、排序、搜索功能</span></a></h3><p>REST 资源的查询接口，一般都要实现分页、过滤、排序、搜索功能，可以实现为一个公共的 API 组件。</p><ul><li><p>分页：<code>/users?offset=0&amp;limit=20</code>（limit：返回记录的数量；offset：指定返回记录的开始位置）。</p></li><li><p>过滤：</p><ul><li><p><code>/users?fields=email,username,address</code>，指定返回哪些属性，而非返回整个对象。</p></li><li><p><code>/users/category/{category}</code>，返回指定类型的 users。</p></li><li><p><code>/users?first_name=Peter</code>，返回 first_name 为 Peter 的用户。</p></li><li><p>高级过滤：</p><ul><li>LHS：<code>price[lte]=200status[ne]=past</code></li><li>RHS：<code>price=lte:200</code>, <code>status=ne:past</code>。注：不能解析“或”。</li><li>Lucene/ElasticSearch：<code>q=price:&lt;200</code>, <code>q=-status:past</code></li></ul><blockquote><p>equal to (<code>=</code>)：<code>eq</code></p><p>not equal to (<code>!=</code>)：<code>neq</code></p><p>less than (<code>&lt;</code>)：<code>lt</code></p><p>less than or equal to (<code>&lt;=</code>)：<code>lte</code></p><p>greater than (<code>&gt;</code>)：<code>gt</code></p><p>greater than or equal to (<code>&lt;=</code>)：<code>gte</code></p><p>and：<code>&amp;</code>，or：<code>|</code></p></blockquote></li></ul></li><li><p>排序：</p><ul><li><p><code>/products?sort=price</code>，按照 price 升序</p></li><li><p><code>/resources?sort=field_name,order</code>，如：<code>/products?sort=price,desc</code>，按照 price 降序</p></li><li><p><code>/users?sort=-age</code>，按照 age 降序排序。</p></li><li><p>多字段排序：</p><ul><li><code>/resources?sort=field1,order1,field2,order2</code>，如<code>/products?sort=price,asc,name,desc</code>，按 price 升序、再 name 降序。</li><li><code>/products?sort=+price,-name</code></li></ul></li></ul></li></ul><p>搜索：<code>/users?q=queryString</code></p><h2 id="_2-rpc-api" tabindex="-1"><a class="header-anchor" href="#_2-rpc-api"><span>2 RPC API</span></a></h2><p>如果业务对性能要求比较高，并且需要提供给多种编程语言调用，就可以考虑使用 RPC API。</p><p>RPC（Remote Procedure Call，远程过程调用）是一种计算机通信协议，允许程序在不同的计算机上调用彼此的程序或服务，就像在本地系统上调用函数一样。RPC 的目标是简化分布式计算，使得开发者可以像调用本地函数一样，调用远程系统中的功能。</p><p>RPC 涉及到以下几个基本过程：</p><ul><li>客户端调用：客户端程序发起一个调用，如同调用本地过程一样。</li><li>参数打包：调用信息（包括过程标识、参数等）需要被打包成消息传递给服务器。</li><li>消息传输：消息通过网络从客户端传送到服务器。</li><li>服务器端解析：服务器端收到消息后，解析调用信息，定位远程过程。</li><li>执行远程过程：服务器端执行远程过程。</li><li>返回结果：执行结果被包装成消息，发送回客户端。</li></ul><p>为了在网络中传输，调用参数和返回结果需要被序列化成字节流，在另一端再反序列化成原始数据格式。</p><p>目前使用过最多的 RPC 框架是 <a href="https://github.com/grpc/grpc-go" target="_blank" rel="noopener noreferrer">gRPC</a>。</p><h3 id="_2-1-grpc" tabindex="-1"><a class="header-anchor" href="#_2-1-grpc"><span>2.1 gRPC</span></a></h3>', 23)
  ]));
}
const _2Basic_html = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render], ["__file", "2-basic.html.vue"]]);
const data = JSON.parse('{"path":"/pl/go/2-basic.html","title":"API 风格","lang":"zh-CN","frontmatter":{"lang":"zh-CN","title":"API 风格","description":null,"article":false,"date":"2024-02-10T00:00:00.000Z","order":2},"headers":[{"level":2,"title":"1 RESTful API","slug":"_1-restful-api","link":"#_1-restful-api","children":[{"level":3,"title":"1.1 URI 映射","slug":"_1-1-uri-映射","link":"#_1-1-uri-映射","children":[]},{"level":3,"title":"1.2 统一分页、过滤、排序、搜索功能","slug":"_1-2-统一分页、过滤、排序、搜索功能","link":"#_1-2-统一分页、过滤、排序、搜索功能","children":[]}]},{"level":2,"title":"2 RPC API","slug":"_2-rpc-api","link":"#_2-rpc-api","children":[{"level":3,"title":"2.1 gRPC","slug":"_2-1-grpc","link":"#_2-1-grpc","children":[]}]}],"git":{"createdTime":1735022911000,"updatedTime":1735022911000,"contributors":[{"name":"Hertz","username":"Hertz","email":"hanzhuosoul@gmail.com","commits":1,"url":"https://github.com/Hertz"}]},"readingTime":{"minutes":3.59,"words":1078},"filePathRelative":"pl/go/2-basic.md","localizedDate":"2024年2月10日","excerpt":"<p>API 风格主要有三种：</p>\\n<ul>\\n<li>REST（REpresentational State Transfer，表现层状态转移）</li>\\n<li>RPC（Remote Procedure Call，远程过程调用）</li>\\n<li><a href=\\"https://graphql.cn/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">GraphQL</a>。</li>\\n</ul>\\n<h2>1 RESTful API</h2>\\n<table>\\n<thead>\\n<tr>\\n<th style=\\"text-align:left\\">HTTP 方法</th>\\n<th style=\\"text-align:left\\">行为</th>\\n<th style=\\"text-align:left\\">URI</th>\\n<th style=\\"text-align:left\\">说明</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td style=\\"text-align:left\\">GET</td>\\n<td style=\\"text-align:left\\">获取资源列表</td>\\n<td style=\\"text-align:left\\">/users</td>\\n<td style=\\"text-align:left\\">获取用户列表</td>\\n</tr>\\n<tr>\\n<td style=\\"text-align:left\\">GET</td>\\n<td style=\\"text-align:left\\">获取某个具体资源</td>\\n<td style=\\"text-align:left\\">/users/zhangsan</td>\\n<td style=\\"text-align:left\\">获取 zhangsan 用户的详细信息</td>\\n</tr>\\n<tr>\\n<td style=\\"text-align:left\\">POST</td>\\n<td style=\\"text-align:left\\">创建一个新资源</td>\\n<td style=\\"text-align:left\\">/users</td>\\n<td style=\\"text-align:left\\">创建一个新用户</td>\\n</tr>\\n<tr>\\n<td style=\\"text-align:left\\">PUT</td>\\n<td style=\\"text-align:left\\">以整体的方式更新一个资源</td>\\n<td style=\\"text-align:left\\">/users/zhangsan</td>\\n<td style=\\"text-align:left\\">更新 zhangsan 用户</td>\\n</tr>\\n<tr>\\n<td style=\\"text-align:left\\">PATCH</td>\\n<td style=\\"text-align:left\\">更新一个资源的某个或某些属性</td>\\n<td style=\\"text-align:left\\">/users/zhangsan</td>\\n<td style=\\"text-align:left\\">更新 zhangsan 用户的某些属性</td>\\n</tr>\\n<tr>\\n<td style=\\"text-align:left\\">DELETE</td>\\n<td style=\\"text-align:left\\">删除一个资源</td>\\n<td style=\\"text-align:left\\">/users/zhangsan</td>\\n<td style=\\"text-align:left\\">删除 zhangsan 用户</td>\\n</tr>\\n</tbody>\\n</table>"}');
export {
  _2Basic_html as comp,
  data
};
