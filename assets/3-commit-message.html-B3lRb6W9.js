import { c as createElementBlock, b as createStaticVNode, o as openBlock } from "./app-DERZZvM1.js";
import { _ as _export_sfc } from "./plugin-vue_export-helper-1tPrXgE0.js";
const _sfc_main = {};
function _sfc_render(_ctx, _cache) {
  return openBlock(), createElementBlock("div", null, _cache[0] || (_cache[0] = [
    createStaticVNode('<h2 id="_1-commit-message-规范" tabindex="-1"><a class="header-anchor" href="#_1-commit-message-规范"><span>1 Commit Message 规范</span></a></h2><p>格式：包含 Header、Body、Footer 三个部分，Header 为必需的。</p><div class="language-text" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">&lt;type&gt;[(scope)]: &lt;description&gt;</span>\n<span class="line"></span>\n<span class="line">[body]</span>\n<span class="line"></span>\n<span class="line">[footer]</span>\n<span class="line"></span></code></pre></div><h3 id="_1-1-type" tabindex="-1"><a class="header-anchor" href="#_1-1-type"><span>1.1 type</span></a></h3><p>commit 的 type 主要分为两类：Development（免测发布） 和 Production（慎重，提交前要做好充分测试）。</p><table><tbody><tr><td></td><td>类型</td><td>类别</td><td>说明</td></tr><tr><td rowspan="5">代码类</td><td>feat</td><td>Production</td><td>新增功能</td></tr><tr><td>fix</td><td>Production</td><td>Bug 修复</td></tr><tr><td>perf</td><td>Production</td><td>提高代码性能的变更</td></tr><tr><td>style</td><td>Development</td><td>代码格式的变更，比如用 gofmt 格式化代码、删除空行等</td></tr><tr><td>refactor</td><td>Production</td><td>代码重构。例如简化代码、重命名变量、删除冗余代码</td></tr><tr><td rowspan="4">非代码类</td><td>test</td><td>Development</td><td>新增测试用例，或更新现有测试用例</td></tr><tr><td>ci</td><td>Development</td><td>持续集成和部署的相关改动，比如修改 Jenkins、GitLab CI 等 CI 配置文件或者更新 systemd unit 文件</td></tr><tr><td>docs</td><td>Development</td><td>文档类的更新，包括修改用户文档或者开发文档等</td></tr><tr><td>chore</td><td>Development</td><td>其他类型，比如构建流程、依赖管理，或辅助工具的变动等</td></tr></tbody></table><h3 id="_1-2-其他字段" tabindex="-1"><a class="header-anchor" href="#_1-2-其他字段"><span>1.2 其他字段</span></a></h3><p>scope 可以按照组件名或功能来设置。</p><p>subject 是 commit 的简短描述。最好用动词开头，使用现在时。结尾不能加英文句号。</p><p>Body 是对本次 commit 的更详细描述。也要以动词开头、使用现在时。它还必须要包括修改的动机、和上一版本相比的改动点。</p><p>Footer 用来说明本次 commit 导致的后果。通常用来说明不兼容的改动和关闭的 Issue 列表。格式如下：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">BREAKING CHANGE: &lt;breaking change summary&gt;</span>\n<span class="line"></span>\n<span class="line">&lt;breaking change description + migration instructions&gt;</span>\n<span class="line"></span>\n<span class="line"></span>\n<span class="line">Fixes #&lt;issue-number&gt;</span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于不兼容的改动，需要再 Footer 不分，以 <code>BREAKING CHANGE</code> 开头，后面跟上不兼容改动的摘要。还需要说明变动的描述、变动的理由和迁移方法。</p><p>关闭 Issue 列表要在 Footer 不分新建一行以 Closes 开头列出，如 <code>Closes #123, #456</code>。</p><h3 id="_1-3-revert" tabindex="-1"><a class="header-anchor" href="#_1-3-revert"><span>1.3 Revert</span></a></h3><p>如果当前 commit 还原了先前的 commit，则应以 <code>revert</code> 开头，后跟还原的 commit 的 Header。Body 中必须写 <code>This reverts commit &lt;hash&gt;</code>。</p><h3 id="_1-4-提交习惯" tabindex="-1"><a class="header-anchor" href="#_1-4-提交习惯"><span>1.4 提交习惯</span></a></h3><p>建议在提交代码时不用 <code>git commit -m</code>，而是直接用 <code>git commit</code> 或 <code>git commit -a</code> 进入交互界面编辑 Commit Message 以更好地格式化 Commit Message。</p><h1 id="_2-合并提交" tabindex="-1"><a class="header-anchor" href="#_2-合并提交"><span>2 合并提交</span></a></h1><p>我们可能在实现一个新功能、修复一个 bug，测试通过后就提交。可能会让代码的 commit 很多。这时，可以使用 <code>git rebase -i</code> 合并之前的所有 commit。</p><p>步骤：</p><ul><li>从 main 分支切换到 feature 分支 <code>git checkout -b feature/user</code></li><li>查看目前的分支信息 <code>git log</code>（假设最后一条提交记录是 a38e6b13a9）</li><li>在 feature/user 分支进行开发测试，遵循规范进行提交（假设新提交了 5 条）</li><li>要将这 5 条合并为一条，要用这 5 条 commit 中最旧的一条的父 commit ID（即 a38e6b13a9），使用 <code>git rebase -i a38e6b13a9</code></li><li>进入交互界面，显示了这 5 条 commit 记录，修改变更操作。要注意第一个 commit 是 pick，后面都是 squash 才能将其余 4 个 commit 都合并进去。</li><li>最后将 feature/user 的改动合并到 main 分支</li></ul><table><thead><tr><th style="text-align:left;">变更操作</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">p, pick</td><td style="text-align:left;">不对该 commit 做任何处理</td></tr><tr><td style="text-align:left;">r, reword</td><td style="text-align:left;">保留该 commit，但修改提交信息</td></tr><tr><td style="text-align:left;">e, edit</td><td style="text-align:left;">保留该 commit，但 rebase 时会暂停，允许修改这个 commit</td></tr><tr><td style="text-align:left;">s, squash</td><td style="text-align:left;">保留该 commit，但会将当前 commit 和上一个 commit 合并</td></tr><tr><td style="text-align:left;">f, fixup</td><td style="text-align:left;">与 squash 相同，但不会保存当前 commit 的提交信息</td></tr><tr><td style="text-align:left;">x, exec</td><td style="text-align:left;">执行其他 shell 命令</td></tr><tr><td style="text-align:left;">d, drop</td><td style="text-align:left;">删除该 commit</td></tr></tbody></table><h2 id="_3-commit-message-规范自动化" tabindex="-1"><a class="header-anchor" href="#_3-commit-message-规范自动化"><span>3 Commit Message 规范自动化</span></a></h2><p>相关的工具有 commit-msg。</p><blockquote><p>原文：<a href="https://time.geekbang.com/column/article/380989?utm_campaign=geektime_search&amp;utm_content=geektime_search&amp;utm_medium=geektime_search&amp;utm_source=geektime_search&amp;utm_term=geektime_search" target="_blank" rel="noopener noreferrer">commit message 如何规范</a></p></blockquote>', 26)
  ]));
}
const _3CommitMessage_html = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render], ["__file", "3-commit-message.html.vue"]]);
const data = JSON.parse('{"path":"/front-end/configuration/3-commit-message.html","title":"Commit Message","lang":"zh-CN","frontmatter":{"lang":"zh-CN","title":"Commit Message","description":null,"article":false,"date":"2023-12-29T00:00:00.000Z","order":3},"headers":[{"level":2,"title":"1 Commit Message 规范","slug":"_1-commit-message-规范","link":"#_1-commit-message-规范","children":[{"level":3,"title":"1.1 type","slug":"_1-1-type","link":"#_1-1-type","children":[]},{"level":3,"title":"1.2 其他字段","slug":"_1-2-其他字段","link":"#_1-2-其他字段","children":[]},{"level":3,"title":"1.3 Revert","slug":"_1-3-revert","link":"#_1-3-revert","children":[]},{"level":3,"title":"1.4 提交习惯","slug":"_1-4-提交习惯","link":"#_1-4-提交习惯","children":[]}]},{"level":2,"title":"3 Commit Message 规范自动化","slug":"_3-commit-message-规范自动化","link":"#_3-commit-message-规范自动化","children":[]}],"git":{"createdTime":1735022911000,"updatedTime":1735022911000,"contributors":[{"name":"Hertz","username":"Hertz","email":"hanzhuosoul@gmail.com","commits":1,"url":"https://github.com/Hertz"}]},"readingTime":{"minutes":3.35,"words":1005},"filePathRelative":"front-end/configuration/3-commit-message.md","localizedDate":"2023年12月29日","excerpt":"<h2>1 Commit Message 规范</h2>\\n<p>格式：包含 Header、Body、Footer 三个部分，Header 为必需的。</p>\\n<div class=\\"language-text\\" data-highlighter=\\"prismjs\\" data-ext=\\"text\\" data-title=\\"text\\"><pre><code><span class=\\"line\\">&lt;type&gt;[(scope)]: &lt;description&gt;</span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\">[body]</span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\">[footer]</span>\\n<span class=\\"line\\"></span></code></pre>\\n</div>"}');
export {
  _3CommitMessage_html as comp,
  data
};
