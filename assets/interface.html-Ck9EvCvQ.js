import { c as createElementBlock, b as createStaticVNode, o as openBlock } from "./app-DERZZvM1.js";
import { _ as _export_sfc } from "./plugin-vue_export-helper-1tPrXgE0.js";
const _sfc_main = {};
function _sfc_render(_ctx, _cache) {
  return openBlock(), createElementBlock("div", null, _cache[0] || (_cache[0] = [
    createStaticVNode('<div class="hint-container info"><p class="hint-container-title">接口是对象能响应的请求的集合。</p><div style="text-align:right;"><p>——《设计模式》</p></div></div><p>这篇文章讨论的主题是：面向接口（interface）编程，而不是面向实现（implementation）编程。</p><p>在静态类型的语言中，可以通过“向上转型”将对象的具体类型隐藏在“超类型”身后。例如在 Java 中使用抽象类或 interface 来实现这一点。</p><p>而 JavaScript 是动态类型的语言，一个变量中存储的数据的类型经常变化，所以在语言层面 JavaScript 没有提供对接口的支持。</p><p>TypeScript 的出现弥补了这一点。下面通过对比「面向实现编程」和「面向接口编程」来展示面向接口编程的优势。</p><h2 id="_1-需求介绍" tabindex="-1"><a class="header-anchor" href="#_1-需求介绍"><span>1. 需求介绍</span></a></h2><p>我们要根据传入的数组渲染一个列表。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">ListRender</span> <span class="token punctuation">{</span></span>\n<span class="line">  <span class="token function">render</span><span class="token punctuation">(</span>list<span class="token operator">:</span> string<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> string <span class="token punctuation">{</span></span>\n<span class="line">    <span class="token keyword">let</span> html <span class="token operator">=</span> <span class="token string">&quot;&lt;ul&gt;&quot;</span><span class="token punctuation">;</span></span>\n<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> str <span class="token keyword">of</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">      html <span class="token operator">+=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;li&gt;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>str<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/li&gt;</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span></span>\n<span class="line">    <span class="token punctuation">}</span></span>\n<span class="line">    html <span class="token operator">+=</span> <span class="token string">&quot;&lt;/ul&gt;&quot;</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line">    <span class="token keyword">return</span> html<span class="token punctuation">;</span></span>\n<span class="line">  <span class="token punctuation">}</span></span>\n<span class="line"><span class="token punctuation">}</span></span>\n<span class="line"></span>\n<span class="line"><span class="token keyword">const</span> myRenderer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListRender</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">renderer<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&quot;Apple&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Banana&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Pear&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-面向实现编程" tabindex="-1"><a class="header-anchor" href="#_2-面向实现编程"><span>2. 面向实现编程</span></a></h2><p>现在增加需求，我们要按照字母序实现对列表的排序。下面是基于实现的编程：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">SortAlphabetically</span> <span class="token punctuation">{</span></span>\n<span class="line">  <span class="token function">sort</span><span class="token punctuation">(</span>list<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span></span>\n<span class="line">    <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token operator">...</span>list<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span> s2<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> s1<span class="token punctuation">.</span><span class="token function">localeCompare</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">  <span class="token punctuation">}</span></span>\n<span class="line"><span class="token punctuation">}</span></span>\n<span class="line"></span>\n<span class="line"><span class="token keyword">class</span> <span class="token class-name">ListRender</span> <span class="token punctuation">{</span></span>\n<span class="line">  sorter<span class="token operator">:</span> SortAlphabetically<span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line">  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>sorter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SortAlphabetically</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">  <span class="token punctuation">}</span></span>\n<span class="line"></span>\n<span class="line">  <span class="token function">render</span><span class="token punctuation">(</span>list<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">{</span></span>\n<span class="line">    <span class="token keyword">const</span> sortedList <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>sorter<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line">    <span class="token keyword">let</span> html <span class="token operator">=</span> <span class="token string">&quot;&lt;ul&gt;&quot;</span><span class="token punctuation">;</span></span>\n<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> str <span class="token keyword">of</span> sortedList<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">      html <span class="token operator">+=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;li&gt;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>str<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/li&gt;</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span></span>\n<span class="line">    <span class="token punctuation">}</span></span>\n<span class="line">    html <span class="token operator">+=</span> <span class="token string">&quot;&lt;/ul&gt;&quot;</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line">    <span class="token keyword">return</span> html<span class="token punctuation">;</span></span>\n<span class="line">  <span class="token punctuation">}</span></span>\n<span class="line"><span class="token punctuation">}</span></span>\n<span class="line"></span>\n<span class="line"><span class="token keyword">const</span> myRenderer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListRender</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">renderer<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&quot;Apple&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Banana&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Pear&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来又提出了新需求，除了要按照字母升序排，还要支持降序排列。于是代码又改成：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">SortAlphabetically</span> <span class="token punctuation">{</span></span>\n<span class="line">  <span class="token function">sort</span><span class="token punctuation">(</span>list<span class="token operator">:</span> string<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> string<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span></span>\n<span class="line">    <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token operator">...</span>list<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">s1<span class="token punctuation">,</span> s2</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> s1<span class="token punctuation">.</span><span class="token function">localeCompare</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">  <span class="token punctuation">}</span></span>\n<span class="line"><span class="token punctuation">}</span></span>\n<span class="line"></span>\n<span class="line highlighted"><span class="token keyword">class</span> <span class="token class-name">SortAlphabeticallyDescending</span> <span class="token punctuation">{</span></span>\n<span class="line highlighted">  <span class="token function">sort</span><span class="token punctuation">(</span>list<span class="token operator">:</span> string<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> string<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span></span>\n<span class="line highlighted">    <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token operator">...</span>list<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">s1<span class="token punctuation">,</span> s2</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> s2<span class="token punctuation">.</span><span class="token function">localeCompare</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line highlighted">  <span class="token punctuation">}</span></span>\n<span class="line highlighted"><span class="token punctuation">}</span></span>\n<span class="line"></span>\n<span class="line"><span class="token keyword">class</span> <span class="token class-name">ListRender</span> <span class="token punctuation">{</span></span>\n<span class="line highlighted">  <span class="token literal-property property">sorter</span><span class="token operator">:</span> SortAlphabetically <span class="token operator">|</span> SortAlphabeticallyDescending<span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line highlighted">  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">ascending</span><span class="token operator">:</span> boolean</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line highlighted">    <span class="token keyword">this</span><span class="token punctuation">.</span>sorter <span class="token operator">=</span> ascending</span>\n<span class="line highlighted">      <span class="token operator">?</span> <span class="token keyword">new</span> <span class="token class-name">SortAlphabetically</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>\n<span class="line highlighted">      <span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">SortAlphabeticallyDescending</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line highlighted">  <span class="token punctuation">}</span></span>\n<span class="line"></span>\n<span class="line">  <span class="token function">render</span><span class="token punctuation">(</span>list<span class="token operator">:</span> string<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> string <span class="token punctuation">{</span></span>\n<span class="line">    <span class="token operator">...</span></span>\n<span class="line">  <span class="token punctuation">}</span></span>\n<span class="line"><span class="token punctuation">}</span></span>\n<span class="line"></span>\n<span class="line"><span class="token comment">// 升序：传入 true</span></span>\n<span class="line"><span class="token keyword">const</span> myRenderer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListRender</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">renderer<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&quot;Apple&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Banana&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Pear&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>目前 <code>ListRender</code> 既要负责渲染列表，还要判断是升序还是降序来实例化对应的排序器，这违反了<strong>单一职责原则</strong>。</p><p>除此之外，我们在新增新的排序方法时，总是要修改 <code>ListRender</code> 的代码，这违反了<strong>开放-封闭原则</strong>。</p><h2 id="_3-面向接口编程" tabindex="-1"><a class="header-anchor" href="#_3-面向接口编程"><span>3. 面向接口编程</span></a></h2><p>下面给出面向接口的编程实现。</p><p>使用 interface 来实现向上转型。让所有的排序对象的类型都隐藏在 <code>Sorter</code> 类型身后。所有继承自 <code>Sorter</code> 类的具体类都要实现其中的 <code>sort()</code> 方法。</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">interface</span> <span class="token class-name">Sorter</span> <span class="token punctuation">{</span></span>\n<span class="line">  <span class="token function">sort</span><span class="token punctuation">(</span>list<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>\n<span class="line"><span class="token punctuation">}</span></span>\n<span class="line"></span>\n<span class="line"><span class="token keyword">class</span> <span class="token class-name">SortAlphabetically</span> <span class="token keyword">implements</span> <span class="token class-name">Sorter</span> <span class="token punctuation">{</span></span>\n<span class="line">  <span class="token function">sort</span><span class="token punctuation">(</span>list<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span></span>\n<span class="line">    <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token operator">...</span>list<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span> s2<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> s1<span class="token punctuation">.</span><span class="token function">localeCompare</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">  <span class="token punctuation">}</span></span>\n<span class="line"><span class="token punctuation">}</span></span>\n<span class="line"></span>\n<span class="line"><span class="token keyword">class</span> <span class="token class-name">SortAlphabeticallyDescending</span> <span class="token keyword">implements</span> <span class="token class-name">Sorter</span> <span class="token punctuation">{</span></span>\n<span class="line">  <span class="token function">sort</span><span class="token punctuation">(</span>list<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span></span>\n<span class="line">    <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token operator">...</span>list<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span> s2<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> s2<span class="token punctuation">.</span><span class="token function">localeCompare</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">  <span class="token punctuation">}</span></span>\n<span class="line"><span class="token punctuation">}</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>ListRender</code> 直接与 <code>Sorter</code> interface 相关联，而不是与具体的实现（<code>SortAlphabetically</code> 和 <code>SortAlphabeticallyDescending</code>）相关联。</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">ListRender</span> <span class="token punctuation">{</span></span>\n<span class="line">  sorter<span class="token operator">:</span> Sorter<span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line">  <span class="token function">constructor</span><span class="token punctuation">(</span>sorter<span class="token operator">:</span> Sorter<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>sorter <span class="token operator">=</span> sorter<span class="token punctuation">;</span></span>\n<span class="line">  <span class="token punctuation">}</span></span>\n<span class="line"></span>\n<span class="line">  <span class="token function">render</span><span class="token punctuation">(</span>list<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">{</span></span>\n<span class="line">    <span class="token keyword">const</span> sortedList <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>sorter<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line">    <span class="token keyword">let</span> html <span class="token operator">=</span> <span class="token string">&quot;&lt;ul&gt;&quot;</span><span class="token punctuation">;</span></span>\n<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> str <span class="token keyword">of</span> sortedList<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">      html <span class="token operator">+=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;li&gt;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>str<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/li&gt;</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span></span>\n<span class="line">    <span class="token punctuation">}</span></span>\n<span class="line">    html <span class="token operator">+=</span> <span class="token string">&quot;&lt;/ul&gt;&quot;</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line">    <span class="token keyword">return</span> html<span class="token punctuation">;</span></span>\n<span class="line">  <span class="token punctuation">}</span></span>\n<span class="line"><span class="token punctuation">}</span></span>\n<span class="line"></span>\n<span class="line"><span class="token comment">// 在运行时根据 isAscending 来实例化目标排序器</span></span>\n<span class="line"><span class="token keyword">const</span> sorter <span class="token operator">=</span> isAscending</span>\n<span class="line">  <span class="token operator">?</span> <span class="token keyword">new</span> <span class="token class-name">SortAlphabetically</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>\n<span class="line">  <span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">SortAlphabeticallyDescending</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"><span class="token keyword">const</span> myRender <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListRender</span><span class="token punctuation">(</span>sorter<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">renderer<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&quot;Apple&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Banana&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Pear&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>针对面向实现编程出现的问题，在这里得到了解决：</p><ul><li><strong>单一职责原则</strong>：<code>ListRender</code> 只负责渲染列表，不必负责选取排序器（在运行时来根据用户操作选择，将排序器传递给 <code>ListRender</code>，不需要在 <code>ListRender</code> 内部进行判断）；</li><li><strong>开放-封闭原则</strong>：无论后续再增加什么规则的排序，我们都不需要再修改 <code>ListRender</code> 类，只需要基于 <code>Sorter</code> 接口实现新的排序器即可。</li></ul>', 23)
  ]));
}
const interface_html = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render], ["__file", "interface.html.vue"]]);
const data = JSON.parse('{"path":"/coding/design-pattern/interface.html","title":"面向接口编程","lang":"zh-CN","frontmatter":{"lang":"zh-CN","title":"面向接口编程","description":null,"article":false,"date":"2023-12-12T00:00:00.000Z","order":1},"headers":[{"level":2,"title":"1. 需求介绍","slug":"_1-需求介绍","link":"#_1-需求介绍","children":[]},{"level":2,"title":"2. 面向实现编程","slug":"_2-面向实现编程","link":"#_2-面向实现编程","children":[]},{"level":2,"title":"3. 面向接口编程","slug":"_3-面向接口编程","link":"#_3-面向接口编程","children":[]}],"git":{"createdTime":1735022911000,"updatedTime":1735022911000,"contributors":[{"name":"Hertz","username":"Hertz","email":"hanzhuosoul@gmail.com","commits":1,"url":"https://github.com/Hertz"}]},"readingTime":{"minutes":2.83,"words":849},"filePathRelative":"coding/design-pattern/interface.md","localizedDate":"2023年12月12日","excerpt":"<div class=\\"hint-container info\\">\\n<p class=\\"hint-container-title\\">接口是对象能响应的请求的集合。</p>\\n<div style=\\"text-align:right\\">\\n<p>——《设计模式》</p>\\n</div>\\n</div>\\n<p>这篇文章讨论的主题是：面向接口（interface）编程，而不是面向实现（implementation）编程。</p>\\n<p>在静态类型的语言中，可以通过“向上转型”将对象的具体类型隐藏在“超类型”身后。例如在 Java 中使用抽象类或 interface 来实现这一点。</p>\\n<p>而 JavaScript 是动态类型的语言，一个变量中存储的数据的类型经常变化，所以在语言层面 JavaScript 没有提供对接口的支持。</p>"}');
export {
  interface_html as comp,
  data
};
